var MODIS = ee.ImageCollection("MODIS/006/MYD13Q1");
// set dates
var startdate = ee.Date.fromYMD(2016,9,1);
var enddate = ee.Date.fromYMD(2017,8,1);

// select NDVI
var NDVI = MODIS.filterDate(startdate,enddate).select("NDVI");

// scaling factor
var multiply = function(image){
  // multply image
  var img = image.multiply(0.0001);
  return img.set('system:time_start',image.get('system:time_start')) ;
};

// use map function to apply function to all maps
NDVI = NDVI.map(multiply);

// Define and display a FeatureCollection of settat. 

var wheat = ee.FeatureCollection([
  ee.Feature(   ee.Geometry.Rectangle( -7.93876, 32.90162, -7.90314, 32.87561), {label: 'Wheat'})]);


Map.addLayer(wheat)


// zoom and display

Map.centerObject(wheat,8);

// The dependent variable we are modeling.
var dependent = 'NDVI';

// The number of cycles per year to model.
var harmonics = 1;

// Make a list of harmonic frequencies to model.  
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);

// Function to get a sequence of band names for harmonic terms.
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Construct lists of names for the harmonic terms.
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);

// Function to add a constant band.
var addConstant = function(image) {
  return image.addBands(ee.Image(1));
};

// add a constant as a band
var harmonics = NDVI.map(addConstant);


// Function to add a time band.
var addTime = function(image) {
  // Compute time in fractional years since the epoch.
  var date = ee.Date(image.get('system:time_start'));
  var years = date.difference(ee.Date('1970-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));
  return image.addBands(timeRadians.rename('t').float());
};

harmonics = harmonics.map(addTime);

// Function to compute the specified number of harmonics
// and add them as bands.  Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos()
      .rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin()
      .rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};


harmonics = harmonics.map(addHarmonics(harmonicFrequencies));


// Independent variables.
var independents = ee.List(['constant', 't'])
  .cat(cosNames).cat(sinNames);

// The output of the regression reduction is a 4x1 array image.
var harmonicTrend = harmonics
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Compute fitted values.
var fittedHarmonic = harmonics.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});


// Plot the fitted model and the original data at the ROI.
print(Chart.image.series(fittedHarmonic.select(['fitted', 'NDVI']), wheat, ee.Reducer.mean(), 250)
    .setOptions({
      title: 'Harmonic model: original and fitted',
      lineWidth: 1,
      pointSize: 3,}));



