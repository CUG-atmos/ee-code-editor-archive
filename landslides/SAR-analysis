Map.setCenter(-119.8414, 37.6693, 13) 

var start = '2017-05-13'
var stop = '2017-05-25'

/***
 * Configures layer options
 */
function getLayerOptions(options) {
  var layer = {
    visible: true,
    opacity: 1.0,
    name: '<layer name>'
  }  
  
  if(options && typeof(options.layer) !== 'undefined') {
    layer.visible = typeof(options.layer.visible) !== 'undefined' ? options.layer.visible : layer.visible
    layer.opacity = typeof(options.layer.opacity) !== 'undefined' ? options.layer.opacity : layer.opacity
    layer.name = typeof(options.layer.name) !== 'undefined' ? options.layer.name : layer.name
  }
  
  return layer
}

/*** 
 * Convet image from degrees to radians
 */
function radians(img) { return img.toFloat().multiply(3.1415927).divide(180); }

/***
 * Computes hillshade
 */
var hillshade = function(az, ze, slope, aspect) {
  var azimuth = radians(ee.Image.constant(az));
  var zenith = radians(ee.Image.constant(ze));
  return azimuth.subtract(aspect).cos().multiply(slope.sin()).multiply(zenith.sin())
      .add(zenith.cos().multiply(slope.cos()));
}

/***
 * Styles RGB image using hillshading, mixes RGB and hillshade using HSV<->RGB transform
 */
function hillshadeRGB(image, elevation, weight, height_multiplier, azimuth, zenith, castShadows, proj) {
  weight = weight || 2.5
  height_multiplier = height_multiplier || 15
  azimuth = azimuth || 0
  zenith = zenith || 45

  var hsv = image.visualize().unitScale(0, 255).rgbToHsv();
 
  var z = elevation.multiply(ee.Image.constant(height_multiplier))

  var terrain = ee.Algorithms.Terrain(z)
  var slope = radians(terrain.select(['slope']));

  var aspect = radians(terrain.select(['aspect'])).resample('bicubic');
  var hs = hillshade(azimuth, zenith, slope, aspect).resample('bicubic');

  if(castShadows) {
    var hysteresis = true
    var neighborhoodSize = 100

    var hillShadow = ee.Algorithms.HillShadow(z, azimuth, zenith, neighborhoodSize, hysteresis).float().not()
    
    // opening
    // hillShadow = hillShadow.multiply(hillShadow.focal_min(3).focal_max(6))    
  
    // cleaning
    hillShadow = hillShadow.focal_mode(3)
  
    // smoothing  
    hillShadow = hillShadow.convolve(ee.Kernel.gaussian(5, 3))
  
    // transparent
    hillShadow = hillShadow.multiply(0.4)
  
    hs = ee.ImageCollection.fromImages([
      hs.rename('shadow'), 
      hillShadow.mask(hillShadow).rename('shadow')
    ]).mosaic()
  }

  var intensity = hs.multiply(ee.Image.constant(weight)).multiply(hsv.select('value'));
  var huesat = hsv.select('hue', 'saturation');

  return ee.Image.cat(huesat, intensity).hsvToRgb();
}

var land = ee.Image("users/gena/land_polygons_image").mask()

var palettes = {
  Black: [/*"d9d9d9",*/"bdbdbd","969696","737373","525252","252525","101010"].reverse(),
  Blues: ["f7fbff","deebf7","c6dbef","9ecae1","6baed6","4292c6","2171b5","08519c","08306b"],
  Hot: ["ffffcc","ffeda0","fed976","feb24c","fd8d3c","fc4e2a","e31a1c","bd0026","800026"].reverse().slice(1)
}

var demLayer = null

function addDem(options) {
    var region = null
    var mask = null
    
    if(options) {
      if(options.region) {
        region = options.region
      }
      
      if(options.mask) {
        mask = options.mask
      }
    }
    
    var dems = ee.ImageCollection.fromImages([
        ee.Image('JAXA/ALOS/AW3D30_V1_1').select('MED').resample('bicubic').float(),
        ee.Image('USGS/NED').resample('bicubic').float(),
        ee.Image('AHN/AHN2_05M_RUW').resample('bicubic').float(),
        ee.Image('UMN/PGC/ArcticDEM/V2/5m').select('elevation').resample('bicubic').float()
    ])
    
    // dems = dems.merge(ee.ImageCollection('NRCan/CDEM').map(function(i) { return i.resample('bicubic').float() }))

    var dems = ee.ImageCollection([ee.Image('JAXA/ALOS/AW3D30_V1_1').select('MED').resample('bicubic').float()])
      
    
    var image = dems.map(function(i) {
      var rgb = i.visualize({min: options.min, max: options.max, palette: palettes.Black})

      var azimuth = 315;
      var zenith = 35;
      var weight = 1.3;
      var heightMultiplier = 30;
      
      if(options.heightMultiplier) {
        heightMultiplier = options.heightMultiplier
      }
      
      var shadows = true
      var image = hillshadeRGB(rgb, i, weight, heightMultiplier, azimuth, zenith, shadows) 
      
      return image
    }).mosaic()
    

    if(region) {
      image = image.clip(region)
    }
    
    if(mask) {
      image = image.updateMask(mask)
    }

    image = image.updateMask(land)
  
    var layer = getLayerOptions(options)  
    
    if(!demLayer) {
      demLayer = ui.Map.Layer(image, {}, layer.name, layer.visible, layer.opacity)
      Map.layers().add(demLayer)
    } else {
      demLayer.setEeObject(image)
    }

    return image
  }


addDem({min: -500, max: 2000, heightMultiplier: 30, layer: { name: 'DEM' }})

var bounds = Map.getCenter()

// radar


/***
 * Converts to natural from dB
 */
function toNatural(i) {
  var t = i.get('system:time_start')

  i = ee.Image.constant(10.0).pow(i.divide(10.0))
  
  i = i.set('system:time_start', t);
  
  return ee.Image(i)
}

var band1 = 'VH'
var band2 = 'VV'  
var mode = 'IW'

// var band1 = 'HH'
// var band2 = 'HV'  
// var mode = 'IW'

// var band1 = 'HH'
// var band2 = 'HV'  
// var mode = 'SM'

var min = 0.03, max = [0.2, 0.6, 0.2]

var images = ee.ImageCollection("COPERNICUS/S1_GRD")
  .filterDate(start, stop)
  .filterBounds(bounds)
  .sort('system:time_start')

print('Image count: ', images.size())
  
images = images
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', band1))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', band2))

print('Image count (' + band1 + '/' + band2 + '): ', images.size())
  
// Filter to get images collected in interferometric wide swath mode.
images  = images
  .filter(ee.Filter.eq('instrumentMode', mode))
  
print('Image count (' + mode + '): ', images.size())

var images_asc = images
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  
var images_desc = images  
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))

images = images_desc
print('Image count (DESCENDING): ', images.size())

print(images)

// // visualize
// var imagesRGB = images.map(function(i) {
//   i = toNatural(i)
  
//   var t = i.get('system:time_start')

//   i = i.visualize({min: min, max: max, bands: [band2, band2, band1], gamma: 1.6})
  
//   i = i.set({'system:time_start': t})
  
//   i = i
//       .set({label: i.date().format('YYYY-MM-dd')})
      
//   return i
// })

// visualize
var imagesRGB = images.map(function(i) {
  var t = i.get('system:time_start')

  i = i.select('VH').visualize({min: -20, max: 0, gamma: 1.6})
  
  i = i.set({'system:time_start': t})
  
  i = i
      .set({label: i.date().format('YYYY-MM-dd')})
      
  return i
})

var list = imagesRGB.toList(100)

var image1 = ee.Image(list.get(0))
print(image1.date())

var image2 = ee.Image(list.get(1))
print(image2.date())


function process(i) {
  return i  
  
  // var edges = ee.Algorithms.CannyEdgeDetector(i.reduce(ee.Reducer.max()), 0.9, 3)
  // return i.blend(edges.mask(edges).visualize({palette: ['ffff00']}))
}

Map.addLayer(process(image1), {}, 'radar - ' + image1.date().format().getInfo())
Map.addLayer(process(image2), {}, 'radar - ' + image2.date().format().getInfo())


// optical
var images = ee.ImageCollection('COPERNICUS/S2')
  .filterBounds(bounds)
  
  
var image1 = ee.Image(images.filterDate('2017-04-27', '2017-04-28').first())

var image2 = ee.Image(images.filterDate('2017-06-06', '2017-06-07').first())

Map.addLayer(image1, {min: 300, max: 6000, bands: ['B12', 'B8A', 'B4']}, 'optical - ' + image1.date().format().getInfo(), false)
Map.addLayer(image2, {min: 300, max: 6000, bands: ['B12', 'B8A', 'B4']}, 'optical - ' + image2.date().format().getInfo(), false)