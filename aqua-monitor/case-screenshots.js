/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var vs_dubai = /* color: d63000 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[55.038878001123635, 24.85529177364027],
                  [55.14862060546875, 24.68695241199918],
                  [55.3436279296875, 25.10549737301469],
                  [55.5413818359375, 25.3688458240828],
                  [55.90118408203125, 25.45319497952489],
                  [55.82427978515625, 25.527571660479637],
                  [55.82573451039116, 25.616698932775044],
                  [55.793508181898915, 25.629127911963337],
                  [55.5908203125, 25.792472545052068],
                  [54.806671142578125, 25.04081549894912],
                  [54.7998046875, 24.930030819509216],
                  [54.8876953125, 24.91633140459907]]]),
            {
              "system:index": "0"
            })]),
    vs_yellowsea = /* color: 98ff00 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[119.9667864169121, 34.06099983193963],
                  [120.69797855102343, 32.55314828034542],
                  [121.29825359944243, 32.058554956670335],
                  [121.83305477155432, 31.661950466626028],
                  [122.06924565225154, 31.63376319605038],
                  [121.8824298199711, 32.23850623264465],
                  [121.18399354483051, 32.92852414284925],
                  [120.58490415484914, 33.7334480673562],
                  [120.21059911115321, 34.54083477800101],
                  [119.38832491843596, 34.975442672254715],
                  [120.02571219868923, 35.610010053235854],
                  [121.02545955361165, 36.350122923735995],
                  [122.58014678392306, 36.85840983182864],
                  [122.80544849310559, 37.50073225706402],
                  [121.58977237107399, 37.73534973542739],
                  [120.73978591651564, 38.06518739823335],
                  [119.42127764361703, 37.30871913721531],
                  [119.1934431432079, 37.454248885435554],
                  [119.39690053086213, 37.80563285218114],
                  [118.84225556592855, 38.3774975191143],
                  [118.33062218970178, 38.30009597229435],
                  [117.83905419087796, 38.65105427478521],
                  [117.96600493648793, 38.907733171769294],
                  [118.47106615492658, 38.83909345633572],
                  [119.20741160858347, 39.25514795943834],
                  [119.64574723717101, 39.73147585109893],
                  [120.5181131830168, 40.13698559373588],
                  [121.2148650264462, 40.75483552624152],
                  [121.68426994137621, 40.70472675425918],
                  [122.02002200684569, 40.453185807329454],
                  [121.22839085511782, 39.69140419858109],
                  [121.05567459794759, 39.389544587454886],
                  [121.34393992744492, 39.15556608193043],
                  [120.9640006481892, 38.95910122431531],
                  [121.05840041352735, 38.65963939552216],
                  [122.10294382382381, 38.91273752198012],
                  [122.78043466648035, 39.19370064326876],
                  [123.17738681336232, 39.5396132089709],
                  [123.55564870151761, 39.78253181684751],
                  [124.45585280691955, 39.5701039299141],
                  [125.09037091371079, 39.37124119693306],
                  [124.93461190521907, 38.87242707648341],
                  [124.59635363063194, 38.39321831518916],
                  [124.52165900674527, 37.850117785739485],
                  [125.27289785002517, 37.595325876644445],
                  [125.91352812009359, 37.771047867220304],
                  [126.27566698274791, 37.52672635142222],
                  [126.32789261074345, 37.15106169966175],
                  [126.02853287485436, 36.7664394336356],
                  [126.43179485573228, 36.061956450038025],
                  [125.47532065486507, 34.38816866673617],
                  [126.38730225227641, 34.19754616928131],
                  [126.94769519634997, 35.80839849549581],
                  [126.73594912920646, 36.57053644918856],
                  [127.05228602607724, 36.90854902024525],
                  [126.41685074448105, 37.901893903531324],
                  [125.70615202162492, 38.16023244370411],
                  [125.09925941549102, 38.32379279858557],
                  [125.64020482219439, 38.697923900271896],
                  [125.36937804490299, 38.96897095968736],
                  [125.64720186701652, 39.69225908057712],
                  [124.51955292492323, 40.052861775892694],
                  [123.29633339923885, 39.9478962203509],
                  [122.34506272968929, 39.529240811143204],
                  [121.69570594699292, 39.61414416185594],
                  [122.25748367228493, 40.18110897599033],
                  [122.81676834141774, 40.67707121425322],
                  [122.42944913661438, 41.0655651694119],
                  [121.72866078829429, 41.38521829849187],
                  [120.96001038316865, 41.08101846017138],
                  [120.43553197452434, 40.823042673931035],
                  [119.35810870123487, 40.015235940953886],
                  [118.67026243874125, 39.47966418610779],
                  [117.96216819694985, 39.49681672902784],
                  [117.15781372891911, 39.21515000814097],
                  [116.98664069326924, 38.625872911163505],
                  [117.38514070766837, 38.15661571315012],
                  [117.86641777717273, 37.72001429296746],
                  [118.34402979130618, 37.594024386947176],
                  [118.4448696260398, 37.17999588748002],
                  [118.78526754280313, 36.85307641751715],
                  [119.71365222101008, 36.794017709007974],
                  [120.33865810543182, 37.41586274859616],
                  [121.36484909935143, 37.15315325750721],
                  [119.77979214455422, 36.38101305736247],
                  [118.8829031545165, 34.741026236676134]]]),
            {
              "system:index": "0"
            })]),
    vs_brahmaputra = /* color: 0B4A8B */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[88.19848230804894, 21.463364958901497],
                  [88.76973155665848, 21.463363039660663],
                  [89.53872093093958, 21.545128923747523],
                  [90.14292647396906, 21.64727322015637],
                  [90.86797254848625, 21.76975246319972],
                  [91.60400138434738, 22.187428366743642],
                  [91.57494716730673, 22.50158770300682],
                  [91.41353904086554, 22.93746324919442],
                  [90.75811026745453, 23.34218929585309],
                  [90.46071559240386, 23.248978578178914],
                  [90.2082108641697, 23.18687997896647],
                  [89.88781284682398, 22.89573350131666],
                  [89.33714262572926, 22.932259042592666],
                  [88.72623553403082, 22.728970806846583],
                  [88.26440061247786, 22.512552856060005],
                  [87.82979579214475, 22.420420171068105],
                  [88.04719986714576, 22.10991002495347],
                  [87.87990130109392, 21.514476154842832]]]),
            {
              "system:index": "0"
            })]),
    vs_taji_najer = /* color: ffc82d */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[92.87872603320204, 37.96340239513089],
                  [93.10659012730866, 37.876770216974954],
                  [93.18215701918143, 37.774773690896204],
                  [93.18619363743653, 37.6553950265681],
                  [93.30424406040765, 37.54448603490283],
                  [93.4936401100141, 37.54014183903644],
                  [93.65570548832034, 37.51409264855658],
                  [93.85057459687175, 37.38539107860945],
                  [94.12205414348523, 37.34286904603626],
                  [94.19374642547746, 37.457344397033424],
                  [93.88677126579978, 37.62851905446607],
                  [93.57878137373882, 37.703196382077124],
                  [93.39106976106132, 37.877810814838796],
                  [93.2520839452859, 38.0499169309407],
                  [93.0618745873353, 38.088501602263094],
                  [92.86619479732747, 38.09655638316788],
                  [92.8395071252354, 38.02132523988708]]]),
            {
              "system:index": "0"
            })]),
    vs_korea = /* color: 00ffff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[126.8096923828125, 38.48261976950729],
                  [126.80557250976562, 38.447135775082444],
                  [126.81793212890625, 38.42454596250916],
                  [126.79046630859375, 38.42669767774885],
                  [126.75407409667969, 38.38365119432096],
                  [126.77536010742188, 38.35027253825765],
                  [126.83578491210938, 38.35350340353833],
                  [126.86599731445312, 38.39441521865828],
                  [126.8646240234375, 38.42777351132905],
                  [126.8536376953125, 38.45681495946778],
                  [126.89620971679688, 38.489069529053474],
                  [126.84814453125, 38.50948995925553]]]),
            {
              "system:index": "0"
            })]),
    vs_myanmar = /* color: bf04c2 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[92.55116023872108, 20.013104796967443],
                  [93.20844752239282, 19.668903346054194],
                  [93.51039030684353, 18.70235874729017],
                  [94.24475704447582, 17.827472374439548],
                  [93.96572021094403, 16.3663799373633],
                  [94.02057378393204, 15.780659221541992],
                  [94.55742035716435, 15.49034856985479],
                  [95.66431216864567, 15.57447088158256],
                  [96.46811095468911, 16.140690426191153],
                  [97.03137021532154, 16.68209446385884],
                  [97.41896534120497, 16.168908731173754],
                  [97.57843646648973, 15.529891630099296],
                  [97.51793184865414, 14.890861481440316],
                  [97.92141293629675, 13.570083270965345],
                  [98.41710187495653, 13.228201036445196],
                  [98.14033045581687, 12.509842931531459],
                  [98.13425937355487, 10.752481697006138],
                  [98.60939206349542, 9.943837868359195],
                  [98.75800541155547, 10.623138739226611],
                  [99.21744530010255, 11.146207844970972],
                  [99.61260344775724, 11.733341844274554],
                  [99.41618418329676, 12.611341363394569],
                  [99.15265634505613, 13.081577810908746],
                  [99.31711006573983, 13.45591005812945],
                  [99.1300414957102, 13.872956148201505],
                  [98.24842798090458, 14.963294332394765],
                  [98.57484458005922, 15.275205467756562],
                  [98.59448224300809, 15.883542478258265],
                  [98.95637226780184, 16.321090696568717],
                  [98.58047197554299, 16.860576931676412],
                  [97.91617482303536, 17.427723533119543],
                  [97.51125095589555, 18.286729454666165],
                  [97.73384255236567, 18.531576671194],
                  [98.06401164789077, 19.63005879664455],
                  [98.98654849391096, 19.754166368303796],
                  [100.17263137333032, 20.414352440306914],
                  [100.69971547880164, 21.481040284007715],
                  [100.26042243675943, 21.52188684283011],
                  [99.99682128143695, 21.99106750645029],
                  [99.18413769413223, 22.092826911073214],
                  [99.49159188912154, 23.02586288923589],
                  [98.94248750191002, 23.227829969141727],
                  [98.459262037999, 23.992560995557728],
                  [97.66857913958529, 23.912258563039337],
                  [97.6026821241669, 24.433230526554468],
                  [97.93211511213735, 25.25039008275682],
                  [98.70079981498384, 25.726210532688064],
                  [98.74465828841983, 27.551775509846074],
                  [98.32738290556017, 27.551764723975598],
                  [98.10775121711254, 28.095592581102185],
                  [97.5806683083888, 28.424430428416265],
                  [96.89986203528758, 27.53227649082704],
                  [97.1414444586054, 27.02477041529425],
                  [96.68024164017038, 27.239768481854767],
                  [95.12091110068468, 26.49532905425971],
                  [94.48393747340833, 25.190825035869793],
                  [94.74748466631945, 25.011816107586906],
                  [94.17638241651821, 23.852069311284072],
                  [93.45159326300825, 23.95250606716893],
                  [93.14396835861305, 22.11325623651305],
                  [92.68270879782767, 21.99114234568016],
                  [92.68264903082661, 21.256075188621466],
                  [92.37516201799724, 21.46065814841206],
                  [92.13352772911867, 21.1946923369115],
                  [92.33117028577237, 20.74345618886142]]]),
            {
              "system:index": "0"
            })]),
    vs_aral_lake = /* color: ff0000 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[58.359375, 45.644768217751924],
                  [57.23876953125, 45.01141864227728],
                  [58.02978515625, 44.54350521320822],
                  [58.260498046875, 43.75522505306928],
                  [58.3154296875, 43.22118973298753],
                  [59.490966796875, 43.25320494908846],
                  [60.106201171875, 43.42100882994724],
                  [60.205078125, 43.977004674964085],
                  [60.64453125, 44.30812668488613],
                  [61.01806640625, 44.512176171071054],
                  [61.74307508386414, 44.636918484960695],
                  [61.06201171875, 44.98034238084972],
                  [60.84228515625, 45.67548217560647],
                  [61.01806640625, 46.042735653846506],
                  [61.41357421875, 46.28622391806708],
                  [61.611328125, 46.815098645992435],
                  [60.4248046875, 46.92025531537451],
                  [59.69970703125, 46.619261036171515],
                  [58.68896484375, 46.057985244793024]]]),
            {
              "system:index": "0"
            })]),
    vs_lake_mead = /* color: 00ff00 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-114.873046875, 36.08462129606931],
                  [-114.8291015625, 36.02911059663187],
                  [-114.77142333984375, 35.99800750540412],
                  [-114.7027587890625, 36.00467348670187],
                  [-114.68353271484375, 36.049098959065645],
                  [-114.6533203125, 36.08018188118015],
                  [-114.56817626953125, 36.117908916563685],
                  [-114.5159912109375, 36.07130229942241],
                  [-114.510498046875, 36.03133177633189],
                  [-114.44732666015625, 36.02466804934357],
                  [-114.378662109375, 36.082401619958524],
                  [-114.37591552734375, 36.04243673532787],
                  [-114.312744140625, 35.99800750540412],
                  [-114.2138671875, 35.98245135784044],
                  [-114.12872314453125, 35.98911865383744],
                  [-114.09027099609375, 36.02022525154813],
                  [-114.08203125, 36.082401619958524],
                  [-114.04083251953125, 36.13787471840729],
                  [-114.027099609375, 36.09127994838079],
                  [-113.9556884765625, 36.09349937380574],
                  [-113.91998291015625, 36.04687828046171],
                  [-113.83209228515625, 36.01578220325809],
                  [-113.7579345703125, 35.93354064249312],
                  [-113.763427734375, 35.85121343450061],
                  [-113.69476318359375, 35.782170703266075],
                  [-113.609619140625, 35.697455807258045],
                  [-113.55743408203125, 35.74205383068035],
                  [-113.5052490234375, 35.860117799832544],
                  [-113.6151123046875, 35.86456960744962],
                  [-113.6700439453125, 35.922420347285055],
                  [-113.73046875, 36.00467348670187],
                  [-113.7689208984375, 36.04243673532787],
                  [-113.87054443359375, 36.12234620030521],
                  [-113.9447021484375, 36.17557404062257],
                  [-113.97491455078125, 36.26199220445664],
                  [-114.0216064453125, 36.268635800737876],
                  [-114.158935546875, 36.12900165569653],
                  [-114.17266845703125, 36.06242171510889],
                  [-114.2193603515625, 36.06686213257888],
                  [-114.32098388671875, 36.15783544102625],
                  [-114.3621826171875, 36.22433448531432],
                  [-114.3402099609375, 36.34167804918316],
                  [-114.2852783203125, 36.40138898484862],
                  [-114.29351806640625, 36.47209813242351],
                  [-114.3182373046875, 36.5471559864337],
                  [-114.3896484375, 36.54274283354783],
                  [-114.44183349609375, 36.50522086338427],
                  [-114.400634765625, 36.43012234551579],
                  [-114.47479248046875, 36.35495110643483],
                  [-114.45831298828125, 36.246488282126535],
                  [-114.52972412109375, 36.18665862660457],
                  [-114.71923828125, 36.1733569352216],
                  [-114.9005126953125, 36.15118243124803]]]),
            {
              "system:index": "0"
            })]),
    vs_singapore = /* color: 0000ff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[103.64021301269531, 1.1665301175285159],
                  [103.87710571289062, 1.1878116357033526],
                  [104.03640747070312, 1.2701901344288768],
                  [104.07485961914062, 1.3031408081468914],
                  [104.13734436035156, 1.312751340599998],
                  [104.07623291015625, 1.3608034433485081],
                  [104.08996689762455, 1.39958743435059],
                  [104.09013913579179, 1.4145175898244127],
                  [104.07348844065609, 1.432879896075835],
                  [104.03366226158232, 1.4502134336233794],
                  [104.00636769195171, 1.4298782940271675],
                  [103.99108966658491, 1.423614784338668],
                  [103.9234546439211, 1.4241292243243986],
                  [103.88671875, 1.4335662226731434],
                  [103.85616342784147, 1.4618814966349174],
                  [103.82852583351587, 1.4749235097590105],
                  [103.81118774414062, 1.4816158541987936],
                  [103.76698446258172, 1.4506845965036097],
                  [103.75127739314917, 1.4499555560159556],
                  [103.72604308202517, 1.4584501681640953],
                  [103.7061303562117, 1.4555326830838007],
                  [103.68415832519531, 1.4373415878086482],
                  [103.65669171233071, 1.3851719851004076],
                  [103.61618041992188, 1.3278535311439326],
                  [103.524169921875, 1.2386120110295855]]]),
            {
              "system:index": "0"
            })]),
    vs_extent_dubai = /* color: 999900 */ee.Feature(
        ee.Geometry.Polygon(
            [[[54.71466064453125, 24.860272503836693],
              [55.51116943359375, 24.8565343393107],
              [55.50032038009965, 25.10400291828386],
              [55.52215576171875, 25.378772315094988],
              [54.674835205078125, 25.380013069118338]]]),
        {
          "system:index": "0"
        }),
    vs_yellowsea_extent = /* color: 009999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[116.6802978515625, 37.78808138412046],
              [119.46533203125, 37.779398571318765],
              [119.37744140625, 39.39375459224348],
              [116.65283203125, 39.364032338047984]]]),
        {
          "system:index": "0"
        }),
    vs_brahmaputra_extent = /* color: ff00ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[89.42733764648438, 23.623765468953597],
              [90.08995056152344, 23.625023667458986],
              [90.07003784179688, 23.90341594456293],
              [89.39437866210938, 23.892743723786328]]]),
        {
          "system:index": "0"
        }),
    vs_taji_najer_extent = /* color: ff9999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.21418762207031, 37.34450497634804],
              [94.15145874023438, 37.32812664308382],
              [94.07867431640625, 37.79350762410675],
              [93.27735900878906, 37.808698976006795],
              [93.18946838378906, 37.80761398306059]]]),
        {
          "system:index": "0"
        }),
    vs_myanmar_extent = /* color: 99ff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.7076416015625, 16.720385051693988],
              [97.22900390625, 16.762467717941604],
              [97.239990234375, 18.916679786648565],
              [94.76806640625, 18.87510275035649]]]),
        {
          "system:index": "0"
        }),
    vs_lake_mead_extent = /* color: 9999ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[-115.14495849609375, 35.94243575255426],
              [-113.85818481445312, 35.94688293218141],
              [-113.81973266601562, 36.54274283354783],
              [-115.1641845703125, 36.52839834681223]]]),
        {
          "system:index": "0"
        }),
    vs_korea_extent = /* color: ffff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[126.67373657226562, 38.49874308602778],
              [126.67098999023438, 38.371808917147554],
              [126.9854736328125, 38.36642542310404],
              [126.9854736328125, 38.49981784551419],
              [126.69639587402344, 38.50142995467628]]]),
        {
          "system:index": "0"
        }),
    land300 = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48_land_300m"),
    water300 = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48_water_300m"),
    vs_myanmar_reservoirs = /* color: 99ffff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[96.602783203125, 16.89391596412634],
                  [96.800537109375, 17.51310571771942],
                  [96.65771484375, 17.942154735291457],
                  [96.4544677734375, 18.594188856740413],
                  [96.3226318359375, 19.05692585554252],
                  [96.2347412109375, 19.31114335506464],
                  [96.141357421875, 19.828725387681164],
                  [96.1955914968014, 19.86294508098288],
                  [96.19491577148438, 19.95785974817016],
                  [96.27799987792969, 19.974639470599364],
                  [96.328125, 19.715000248204287],
                  [96.5478515625, 18.859508700693763],
                  [96.932373046875, 17.889886818625325],
                  [97.2509765625, 17.36636733709517],
                  [97.152099609375, 18.474399059267128],
                  [97.31689453125, 20.019806765982878],
                  [98.228759765625, 20.421864987708677],
                  [98.3056640625, 21.181850766266123],
                  [98.6441937457837, 22.797825072952694],
                  [98.1134033203125, 23.22620304830155],
                  [97.3828125, 23.407806080861427],
                  [96.646728515625, 22.86731796007561],
                  [96.0150146484375, 22.720457009025893],
                  [96.13037109375, 22.477030464933303],
                  [96.240234375, 22.009267904493793],
                  [96.1138916015625, 21.732712962778923],
                  [95.78827665634708, 21.78845870394875],
                  [95.7134090279892, 21.835211425157365],
                  [95.55238670399876, 21.83304312419401],
                  [95.50140380859375, 21.59615057646144],
                  [95.08193877773874, 21.167165969092345],
                  [94.98007959994743, 20.720277595979205],
                  [95.1680524165588, 20.364039408079638],
                  [95.284423828125, 20.52993312517078],
                  [95.3997802734375, 19.554613885372127],
                  [95.4437255859375, 18.99460885318638],
                  [95.5645751953125, 18.245003052249714],
                  [95.64697265625, 17.748686651728807],
                  [95.899658203125, 17.51834418785222],
                  [96.13037109375, 17.06728740376787],
                  [96.21826171875, 16.899171994430837]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[94.94384765625, 17.680661583736246],
                  [95.152587890625, 17.868975338932746],
                  [95.0482177734375, 18.52128332549629],
                  [94.9493408203125, 19.186677697957833],
                  [95.13088121342889, 19.282346626309153],
                  [94.87518310546875, 19.80030171299976],
                  [94.41551650723079, 20.30454510596596],
                  [94.4659423828125, 20.390974413170614],
                  [94.69530243489703, 20.520667327888447],
                  [94.53460693359375, 20.958874775031518],
                  [94.72424150960569, 20.917305329721632],
                  [94.7216838036436, 21.068040931818096],
                  [93.922119140625, 21.25866133371466],
                  [94.11009836358551, 21.366696267851527],
                  [94.1748046875, 21.63189901318895],
                  [94.65998197715749, 21.50948667358876],
                  [94.8175048828125, 21.263780615837863],
                  [95.19643296795857, 21.472099785041916],
                  [95.086669921875, 21.871694635142717],
                  [95.086669921875, 22.085639901650325],
                  [94.4549560546875, 22.121266045425767],
                  [94.0155029296875, 22.131443290658808],
                  [93.482666015625, 21.652322721683657],
                  [93.5211181640625, 21.151115354148047],
                  [94.32861328125, 19.932041306115536]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[95.712890625, 22.836945920943855],
                  [95.8612060546875, 23.115101554603044],
                  [95.82275390625, 23.725011735951796],
                  [95.4931640625, 24.38212418111824],
                  [95.0921630859375, 24.041447460138734],
                  [94.779052734375, 23.241346102386135],
                  [95.42764217659612, 23.23283125006278],
                  [95.52474975585938, 22.953335182044686]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[97.8662109375, 16.946469670739273],
                  [97.767333984375, 17.09879223767869],
                  [97.6739501953125, 17.07778960654538],
                  [97.7288818359375, 16.975367952825152]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[97.79754638671875, 16.175110684011464],
                  [97.72064208984375, 16.114430643112332],
                  [97.7398681640625, 16.04581345375218],
                  [97.811279296875, 16.074846693720446]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[98.26171875, 16.541430360299984],
                  [98.22944641113281, 16.68158186610902],
                  [98.14018249511719, 16.728933845580073],
                  [98.06259155273438, 16.684212839636928],
                  [98.21022033691406, 16.50851615084975]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[95.29129028320312, 22.108543455483815],
                  [95.44368602381724, 21.98253847774488],
                  [95.46981811523438, 22.233175265402785],
                  [95.16220092773438, 22.85719470096965],
                  [94.93698120117188, 22.78251239573235],
                  [94.93560791015625, 22.5861184893211],
                  [95.17044067382812, 22.350075806124863]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[93.11050415039062, 20.847261769257095],
                  [93.13385009765625, 20.897305453715163],
                  [92.90725708007812, 21.02682813712425],
                  [92.81524658203125, 20.94604992010052],
                  [92.8509521484375, 20.853678557426065],
                  [92.92098999023438, 20.884475328885344]]]),
            {
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[94.09515380859375, 19.812576195765924],
                  [93.98941040039062, 19.758949123832707],
                  [94.05807495117188, 19.72146407652849]]]),
            {
              "system:index": "8"
            })]),
    vs_three_gorges = /* color: ff99ff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[110.99549276085145, 30.812340627437827],
                  [111.01231400378776, 30.83179749796677],
                  [111.01265820111712, 30.904584126838774],
                  [110.85280590740626, 30.94699345153503],
                  [110.78891566775405, 31.048187011894342],
                  [110.84237179483534, 31.135251488216717],
                  [110.7875827666054, 31.252613009624884],
                  [110.76272319317741, 31.365353639518638],
                  [110.68719855709992, 31.29027684665425],
                  [110.72969361090486, 31.182074588708865],
                  [110.69094208733395, 31.09276826445063],
                  [110.58338994149995, 31.04588727659915],
                  [110.42347322251283, 31.102561470822163],
                  [110.35643542869514, 31.09590531976049],
                  [110.323847807025, 31.251594006878634],
                  [110.25874170391592, 31.238628683263993],
                  [110.289603293646, 31.150958860631576],
                  [110.2530488325524, 31.042189967678883],
                  [110.13889151124863, 31.08333890405294],
                  [110.03156201970512, 31.06446253326153],
                  [109.97621649326538, 31.12305072798739],
                  [109.86260029868708, 31.30331332433081],
                  [109.63803630284428, 31.32989589982266],
                  [109.59270798157513, 31.31022468736411],
                  [109.83301560377708, 31.204494639391896],
                  [109.85880767381036, 31.0905322646984],
                  [109.64428392719174, 31.04606299199862],
                  [109.65192779339463, 31.09585027452248],
                  [109.46416491904506, 31.15994435770022],
                  [109.38809244794857, 31.16344902942519],
                  [109.34095829142552, 31.122571448130042],
                  [109.43258309300438, 31.05837524862983],
                  [109.31393946738069, 31.000561093570045],
                  [109.14940597237046, 30.9854360185793],
                  [108.94396879730607, 30.96249641211641],
                  [108.87338312389045, 31.122383827996707],
                  [108.8374858207585, 31.224691752024615],
                  [108.76855199462693, 31.262377744101045],
                  [108.80300186211662, 31.004796864771684],
                  [108.74019801447571, 30.97260931843568],
                  [108.72549394548207, 31.08939267254189],
                  [108.61289021238213, 31.153463615912482],
                  [108.55833657578478, 31.214277276708774],
                  [108.53740849930068, 31.220442287792043],
                  [108.47487690398464, 31.294969971530648],
                  [108.41815100917518, 31.27090696377042],
                  [108.36982564155187, 31.198697717741506],
                  [108.29011024627562, 31.20295511670068],
                  [108.17818600440819, 31.06615511404542],
                  [108.2879071623779, 30.965915988962166],
                  [108.64156972264891, 30.997800977587],
                  [108.50309051282193, 30.938161478707666],
                  [108.41302503796464, 30.866115918728305],
                  [108.28811655584377, 30.826781021411456],
                  [108.37307522019762, 30.72692028733143],
                  [108.25206042478385, 30.589406220037148],
                  [108.16403971051295, 30.47745710444276],
                  [108.108987271719, 30.454650941505967],
                  [107.97994497194418, 30.381898249416064],
                  [107.93381521271601, 30.249593636630845],
                  [107.73693053349791, 29.9725326574833],
                  [107.63403449015095, 29.89767842324496],
                  [107.54655613473551, 29.890687392755183],
                  [107.53329893673731, 29.984422021131905],
                  [107.45272827686881, 29.942472225232258],
                  [107.40841948752609, 29.889477489189762],
                  [107.37764520731344, 29.764405706929153],
                  [107.31025848411923, 29.765544074487675],
                  [107.18676216944789, 29.70001231679162],
                  [107.1366893757156, 29.779300365812603],
                  [107.1377096838296, 29.849903481020576],
                  [107.04257018000976, 29.841861878994912],
                  [106.90387092315018, 29.747715487311847],
                  [106.88189865087259, 29.657060635432813],
                  [106.96157428651009, 29.694177851203783],
                  [106.99868708781412, 29.74964423311392],
                  [107.07689863263658, 29.577071467062762],
                  [107.25654108380536, 29.67263758087394],
                  [107.32709984495, 29.675009473060225],
                  [107.50445161847301, 29.396827491435577],
                  [107.83485700416145, 29.272263359307647],
                  [107.73202292912629, 29.37731091490415],
                  [107.55415504371922, 29.454993336789148],
                  [107.44768130215198, 29.655866754848],
                  [107.4832182094774, 29.747214499536117],
                  [107.56013063186072, 29.796438410708635],
                  [107.80747568241941, 29.791818716690994],
                  [107.7868763846052, 29.895449488265065],
                  [107.89437687050008, 30.04065880544184],
                  [107.98325245181218, 30.124955950903026],
                  [108.15586691681142, 30.25015205719904],
                  [108.39797644821874, 30.517325009013653],
                  [108.41571812725374, 30.639178186294576],
                  [108.47213235114805, 30.77724213390016],
                  [108.5517530954944, 30.874256712643152],
                  [108.7186249313097, 30.88084986418565],
                  [108.8388785603372, 30.922638622270878],
                  [108.85047535662306, 30.876291203409497],
                  [108.79616763489639, 30.828753524925055],
                  [108.6080848402205, 30.731216907018208],
                  [108.87806840313533, 30.712492306192512],
                  [108.97521338357399, 30.833958203116723],
                  [109.15213522165845, 30.903682287251296],
                  [109.35513669981958, 30.93756838382668],
                  [109.5522678757302, 30.866132584011734],
                  [109.71767655243264, 30.96936617382099],
                  [109.79145566572492, 31.024804397630398],
                  [109.9367326292222, 31.04484188899143],
                  [109.98277060254213, 30.981294516225688],
                  [109.98897665998538, 30.91172987270357],
                  [110.14623044435893, 30.964610298603088],
                  [110.40988769431522, 30.981806304455084],
                  [110.47022408622001, 30.92107843319768],
                  [110.61374458768796, 30.925370848134975],
                  [110.78882244377814, 30.877479902494724],
                  [110.8396480526385, 30.811929230013174],
                  [110.91932229549536, 30.844029926161205]]]),
            {
              "system:index": "0"
            })]),
    hand1000 = ee.Image("users/gena/GlobalHAND/30m/hand-1000"),
    fa = ee.Image("WWF/HydroSHEDS/15ACC"),
    srtm = ee.Image("USGS/SRTMGL1_003"),
    change = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var bg = ee.Image(1).visualize({opacity: 0.8, forceRgbOutput: true})
Map.addLayer(bg, {}, 'bg')

var maxArea = 300
var land = land300
Map.addLayer(land.mask(land.divide(maxArea)), {min: 0, max: 1, opacity: 0.7, palette: ['000000', '00ff00']}, 'land (300m)', true)
var water = water300
Map.addLayer(water.mask(water.divide(maxArea)), {min: 0, max: 1, opacity: 0.7, palette: ['000000', '00d8ff']}, 'water (300m)', true)

var changeRGB = change.visualize({ min: -0.02, max: 0.02, palette: ['00ff00', 'ffffff', '00d8ff'], forceRgbOutput: true})
Map.addLayer(changeRGB, {}, 'water / land change (1985 - 2016)', false)

// render land change as WGS84
/*
var land2 = land.changeProj(ee.Projection('EPSG:4326'), ee.Projection('EPSG:3857').scale(111315, 111315))
Map.addLayer(ee.ImageCollection([
  ee.Image(0).visualize({palette:['000000'], forceRgbOutput:true}), 
  land2.mask(land2.divide(maxArea)).visualize({min: 0, max: 1, palette: ['000000', '00ff00'], forceRgbOutput:true})
]).mosaic(), {}, 'land (300m) (WGS84)', false)
*/

function radians(img) { return img.toFloat().multiply(3.1415927).divide(180); }

function hillshade(az, ze, slope, aspect) {
  var azimuth = radians(ee.Image(az));
  var zenith = radians(ee.Image(ze));
  return azimuth.subtract(aspect).cos().multiply(slope.sin()).multiply(zenith.sin())
      .add(zenith.cos().multiply(slope.cos()));
}

function hillshadeit(image, elevation, weight, height_multiplier) {
  var hsv  = image.unitScale(0, 255).rgbtohsv();

  var terrain = ee.call('Terrain', elevation.multiply(height_multiplier));
  var slope = radians(terrain.select(['slope']));
  var aspect = radians(terrain.select(['aspect']));
  var hs = hillshade(azimuth, zenith, slope, aspect);

  var intensity = hs.multiply(weight).multiply(hsv.select('value'));
  var huesat = hsv.select('hue', 'saturation');
  
  return ee.Image.cat(huesat, intensity).hsvtorgb();
}

var hand = ee.ImageCollection("users/gena/global-hand/hand-100")

var handThreshold = 40;
var handClosingBuffer = 800;
var slopeThreshold = 20
var slopeClosingBuffer = 120;

var handMask = 
  ee.Image(1)
  hand.mosaic().lt(50)

var handMaskClosed = 
  ee.Image(1)
  //hand.mosaic().gt(handThreshold).and(noHandMask.not())
  //    .focal_max(handClosingBuffer, 'circle', 'meters').focal_min(handClosingBuffer, 'circle', 'meters').not()

// slope
var demImages = [
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM1'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM2'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM3'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM4'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM5'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM6'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM7'),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM8'),
  ee.Image('USGS/SRTMGL1_003')
];

// fix cache
var slope = ee.ImageCollection(demImages).map(function(i) { 
  var dem = i.rename('elevation').add(0)
  var terrain = ee.call('Terrain', dem);
  return terrain.select(['slope']);
}).mosaic()

/*
// sigmoid
var k = 0.4
var x0 = 25
var slopeMask = ee.Image.constant(1.0).divide(ee.Image.constant(Math.E).pow(slope.subtract(x0).multiply(-k)))
*/

var slopeMask = slope.gt(slopeThreshold)

slopeMask = slopeMask
  .focal_max(slopeClosingBuffer, 'circle', 'meters')
  .focal_min(slopeClosingBuffer, 'circle', 'meters')


var hand = ee.ImageCollection("users/gena/global-hand/hand-100"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    glcf = ee.ImageCollection("GLCF/GLS_WATER"),
    geometry = /* color: d63000 */ee.Geometry.MultiPoint();

function renderLandsatPercentile(options) {
  var percentile = options.percentile;
  var start = options.start;
  var stop = options.stop;
  var sharpen = options.sharpen;
  var smoothen = options.smoothen;
  var filterCount = options.filterCount;
  var isRgb = options.isRgb;
  
  var bands = ['red', 'green', 'blue'];
  var bandsL8 = ['B6', 'B5', 'B3']
  var bandsL7 = ['B5', 'B4', 'B2']

  if(isRgb) {
    bands = ['swir1', 'nir', 'green'];
    bandsL8 = ['B4', 'B3', 'B2']
    bandsL7 = ['B3', 'B2', 'B1']
  }
  
  var l8 = new ee.ImageCollection('LANDSAT/LC8_L1T_TOA').filterDate(start, stop).select(bandsL8, bands);
  var l7 = new ee.ImageCollection('LANDSAT/LE7_L1T_TOA').filterDate(start, stop).select(bandsL7, bands);
  var l5 = new ee.ImageCollection('LANDSAT/LT5_L1T_TOA').filterDate(start, stop).select(bandsL7, bands);
  var l4 = new ee.ImageCollection('LANDSAT/LT4_L1T_TOA').filterDate(start, stop).select(bandsL7, bands);

  var images = ee.ImageCollection(l8.merge(l7).merge(l5).merge(l4))
    .map(function(i) { return i.mask(i.gt(0.0001).and(i.lt(1)))}) // filter-out crappy TOA images
    
  //images = ee.ImageCollection(images.limit(100))
  
  //var images = ee.ImageCollection(l7.merge(l5).merge(l4))

  if(smoothen) {
    images = images.map(function(i) { return i.resample('bicubic'); })
  }

  var image = images
    .map(function(i) { return i.mask(i.gt(0.0001).and(i.lt(1)))})
    //.filterMetadata('SUN_AZIMUTH', 'greater_than', 5) // almost empty
    .reduce(ee.Reducer.percentile([percentile]))
    .rename(bands)

  if(filterCount > 0) {
    image = image.mask(images.select(0).count().gt(filterCount));
    Map.addLayer(images.select(0).count(), {min:filterCount, max:200, palette:['d7191c','fdae61','ffffbf','a6d96a','1a9641']}, 'count', false)
  }

  if(sharpen) {
    // LoG
    image = image.subtract(image.convolve(ee.Kernel.gaussian(40, 30, 'meters')).convolve(ee.Kernel.laplacian8(0.4)))
  }

  return image.visualize({min: 0.05, max: [0.4, 0.4, 0.5], gamma: 1.4})
}

// A helper to apply an expression and linearly rescale the output.
var rescale = function (img, thresholds) {
  return img.subtract(thresholds[0]).divide(ee.Number(thresholds[1]).subtract(thresholds[0]))
  .copyProperties(img)
  .copyProperties(img, ['system:time_start']);
};

function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

var generateGrid = function(xmin, ymin, xmax, ymax, dx, dy) {
  var polys = [];
  for (var x = xmin; x < xmax; x += dx) {
    var x1 = Math.max(-179.99, Math.min(179.99, x));
    var x2 = Math.max(-179.99, Math.min(179.99, x + dx));
    
    for (var y = ymin; y < ymax; y += dy) {
      var y1 = Math.max(-89.99, Math.min(89.99, y));
      var y2 = Math.max(-89.99, Math.min(89.99, y + dy));

      polys.push(ee.Feature(ee.Geometry.Rectangle(x1, y1, x2, y2)));
    }
  }
  print("Cell count: " + polys.length)

  return ee.FeatureCollection(polys);
}

function getIntersection(left, right) {
  var spatialFilter = ee.Filter.intersects({leftField: '.geo', rightField: '.geo', maxError: 1000});
  var saveAllJoin = ee.Join.saveAll({matchesKey: 'match'});
  var intersectJoined = saveAllJoin.apply(left, right, spatialFilter);

  return intersectJoined.map(function(f) { 
    var match = ee.List(f.get('match'));
    return f.set('count', match.length())
  }).filter(ee.Filter.gt('count', 0))
}

function getEdge(i) {
  var canny = ee.Algorithms.CannyEdgeDetector(i, 0.99, 0);
  canny = canny.mask(canny)
  return canny;
}

function createTimeBand(img) {
  var date = ee.Date(img.get('system:time_start'));
  var year = date.get('year').subtract(1970);
  return ee.Image(year).byte().addBands(img)
}

// TODO: split it into smaller functions
function renderWaterTrend(options) {
  var dateIntervals = options.dateIntervals;
  var percentile = options.percentile;
  
  var slopeThreshold = options.slopeThreshold;
  var slopeThresholdRatio = options.slopeThresholdRatio;
  var refine = options.refine;
  var slopeThresholdRefined = options.slopeThresholdRefined;
  
  var ndviFilter = options.ndviFilter;
  var filterCount = options.filterCount;

  var showEdges = options.showEdges;
  var smoothen = options.smoothen;
  var includeBackgroundSlope = options.includeBackgroundSlope;
  var backgroundSlopeOpacity = options.backgroundSlopeOpacity;
  var refineFactor = options.refineFactor;
  
  var ndwiMaxLand = options.ndwiMaxLand;
  var ndwiMinWater = options.ndwiMinWater;

  var bands = ['green', 'swir1'];
  var bands8 = ['B3', 'B6'];
  var bands7 = ['B2', 'B5'];

  if(ndviFilter > -1) {
    bands = ['green', 'swir1', 'nir', 'red'];
    bands8 = ['B3', 'B6', 'B5', 'B4'];
    bands7 = ['B2', 'B5', 'B4', 'B3'];
  }
  
  var images = new ee.ImageCollection([])

  var images_l8 = new ee.ImageCollection('LANDSAT/LC8_L1T_TOA').select(bands8, bands);
  images = new ee.ImageCollection(images.merge(images_l8));

  var images_l7 = new ee.ImageCollection('LANDSAT/LE7_L1T_TOA').select(bands7, bands);
  images = new ee.ImageCollection(images.merge(images_l7));

  var images_l5 = new ee.ImageCollection('LANDSAT/LT5_L1T_TOA').select(bands7, bands);
  images = new ee.ImageCollection(images.merge(images_l5));

  var images_l4 = new ee.ImageCollection('LANDSAT/LT4_L1T_TOA').select(bands7, bands);
  images = new ee.ImageCollection(images.merge(images_l4));
  
  // images = ee.ImageCollection(images.limit(100))

  var list = ee.List(dateIntervals);
  
  // add percentile images for debugging
  if(options.debugMapLayers) {
    list.getInfo().map(function (i) {
      var start = ee.Date(i[0].value); 
      var stop = ee.Date(i[1].value);
  
      var percentiles = ee.List.sequence(0, 100, 1)

      var filtered = images.filterDate(start, stop).map(function(i) {
            var sunAzimuth = ee.Image.constant(i.get('SUN_AZIMUTH')).toFloat().rename('sun_azimuth').divide(100)
            var sunElevation = ee.Image.constant(i.get('SUN_ELEVATION')).toFloat().rename('sun_elevation').divide(100)
            
            return i
              .addBands(sunAzimuth)
              .addBands(sunElevation)
              .addBands(i.normalizedDifference(['green', 'swir1']).rename('mndwi'));
          })
          
      Map.addLayer(filtered, {}, 'all ' + start.format('YYYY-MM-dd').getInfo(), false)

      var result = filtered
          .reduce(ee.Reducer.percentile(percentiles))
          .set('system:time_start', start)
          
      Map.addLayer(result, {}, 'all percentiles ' + start.format('YYYY-MM-dd').getInfo(), false)
    });
  }
  
  
  // compute a single annual percentile
  var annualPercentile = ee.ImageCollection(list.map(function (i) {
    var l = ee.List(i);
    var start = l.get(0); 
    var stop = l.get(1);

    var filtered = images.filterDate(start, stop)

    if(smoothen) {
      filtered = filtered.map(function(i) { return i.resample('bicubic'); })
    }

    var image = filtered
        .reduce(ee.Reducer.percentile([percentile])).rename(bands)
        
    var result = image
        .normalizedDifference(['green', 'swir1']).rename('mndwi')
        .set('system:time_start', start);

    if(ndviFilter > -1) {
      var ndvi = image.normalizedDifference(['nir', 'red']).rename('ndvi');
      result = result.addBands(ndvi)
    }

    if(filterCount > 0) {
      var count = filtered.select(0).count().rename('count')
      
      // mask bad
/*
      var good = filtered.select('green')
        .reduce(ee.Reducer.percentile([percentile])).gt(0.0001)

      count = count.multiply(good)
*/      

      result = result.addBands(count);
    }

    return result
  }));
  
  var mndwi = annualPercentile.select('mndwi')

  if(ndviFilter > -1) {
    var ndvi = annualPercentile.select('ndvi')
  }

  var fit = mndwi
    .map(function(img) { 
      return rescale(img, [-0.6, 0.6]);
    })
    .map(createTimeBand)
    .reduce(ee.Reducer.linearFit().unweighted());

  var scale = fit.select('scale')
  
  var scaleMask = scale.mask();

  if(options.debugMapLayers) {
    Map.addLayer(scaleMask, {}, 'scale original mask', false)

    Map.addLayer(scale, {
        min: -slopeThreshold * slopeThresholdRatio,
        max: slopeThreshold * slopeThresholdRatio,
        palette: ['00ff00', '000000', '00d8ff'],
      }, 'scale', false)
  }

  var mndwiMin = mndwi.min();
  var mndwiMax = mndwi.max();
  
  if(ndviFilter > -1) {
    var ndviMin = ndvi.min();
  }
  
  if(options.debugMapLayers) {
    Map.addLayer(ee.Image(mndwi.first()), {}, 'mndwi first (raw)', false)
    Map.addLayer(ee.Image(mndwi.toList(1, 1).get(0)), {}, 'mndwi last (raw)', false)

    Map.addLayer(mndwiMin, {}, 'mndwi min (raw)', false)
    Map.addLayer(mndwiMax, {}, 'mndwi max (raw)', false)
    if(ndviFilter > -1) {
      Map.addLayer(ndvi.min(), {}, 'ndvi min (raw)', false)
      Map.addLayer(ndvi.max(), {}, 'ndvi max (raw)', false)
    }
  }

  if(options.useSwbdMask) {
    var swbd = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24').select('water_mask')
    var swbdMask = swbd.unmask().not()
      .focal_max(15000, 'circle', 'meters').reproject('EPSG:4326', null, 500)
  }  

  // computes a mask representing a surface water change using a given slope (linear fit scale) threshold
  function computeSlopeMask(threshold) {
    var minWaterMask = mndwiMax.gt(ndwiMinWater) // maximum looks like water
    var maxLandMask = mndwiMin.lt(ndwiMaxLand) // minimum looks like land

    if(options.debugMapLayers) {
      var change = scale.unmask().abs().gt(threshold);
      var changeVis = scale.mask(change).visualize({
        min: -slopeThreshold * slopeThresholdRatio,
        max: slopeThreshold * slopeThresholdRatio,
        palette: ['00ff00', '000000', '00d8ff'],
      })

      Map.addLayer(changeVis, {}, 'scale thresholded, unmasked', false)
    }
    
    var mask = scale.unmask().abs().gt(threshold)
      .multiply(minWaterMask) 
      .multiply(maxLandMask) 

    if(ndviFilter > -1) {
      var ndviMask = ndviMin.lt(ndviFilter)
      mask = mask.multiply(ndviMask) // deforestation?
    }

    if(filterCount > 0) {
      var countMask = annualPercentile.select('count').min().gt(filterCount)
      mask = mask.multiply(countMask);
    }
    
    if(options.useSwbdMask) {
      mask = mask.multiply(swbdMask)
    }
    
    // add eroded original scale mask (small scale-friendly erosion, avoid kernel too large)
    var erodedScaleMask = scaleMask
      .focal_min(10000, 'square', 'meters').reproject('EPSG:4326', null, 1000)

    mask = mask.multiply(erodedScaleMask)

    if(options.debugMapLayers) {
      Map.addLayer(minWaterMask.not().mask(minWaterMask.not()), {}, 'min water mask', false)
      Map.addLayer(maxLandMask.not().mask(maxLandMask.not()), {}, 'max land mask', false)
      
      if(ndviFilter > -1) {
        Map.addLayer(ndviMask.not().mask(ndviMask.not()), {}, 'ndvi mask', false)
      }
      if(filterCount > 0) {
        Map.addLayer(countMask.not().mask(countMask.not()), {}, 'count mask', false)
      }
      
      if(options.useSwbdMask) {
        Map.addLayer(swbdMask.not().mask(swbdMask.not()), {}, 'swbd mask', false)
      }
      
      Map.addLayer(erodedScaleMask.not().mask(erodedScaleMask.not()), {}, 'scale original mask (eroded)', false)
    }

    return mask;
  }

  //print('slope threshold: ', slopeThresholdRatio * slopeThreshold)
  var mask = computeSlopeMask(slopeThresholdRatio * slopeThreshold);

  if(refine) {
    // this should be easier, maybe use SRTM projection
    var mask = mask.reproject('EPSG:4326', null, 30)
    var prj = mask.projection();

    // more a buffer around larger change
    var maskBuffer = mask
      .reduceResolution(ee.Reducer.max(), true)
      .focal_max(refineFactor)
      .reproject(prj.scale(refineFactor, refineFactor))
      .focal_mode(ee.Number(refineFactor).multiply(30), 'circle', 'meters')

    print('slope threshold (refined): ', slopeThresholdRefined * slopeThresholdRatio)
    var maskRefined = computeSlopeMask(slopeThresholdRefined * slopeThresholdRatio).mask(maskBuffer)

    if(options.debugMapLayers) {
      Map.addLayer(mask.mask(mask), {}, 'mask (raw)', false)
      Map.addLayer(maskBuffer.mask(maskBuffer), {}, 'mask buffer (raw)', false)
      Map.addLayer(maskRefined.mask(maskRefined), {}, 'mask refined (raw)', false)
    }
    
    // smoothen scale and mask
    if(smoothen) {
      scale = scale
        .focal_median(25, 'circle', 'meters', 3);

      mask = mask
        .focal_mode(35, 'circle', 'meters', 3)
    }
  }

  if(options.debugMapLayers) {
    Map.addLayer(scale, {}, 'scale (raw)', false)
  }

  var results = [];

  // background
  var bg = ee.Image(1).toInt().visualize({palette: '000000', opacity: 0.6});
  
  if(includeBackgroundSlope) {
    bg = scale.visualize({
        min: -slopeThreshold * slopeThresholdRatio,
        max: slopeThreshold * slopeThresholdRatio,
        palette: ['00ff00', '000000', '00d8ff'], opacity: backgroundSlopeOpacity
      });

    // exclude when both are water
    bg = bg.mask(ee.Image(backgroundSlopeOpacity).toFloat().multiply(mndwiMin.gt(0.4).focal_mode(1).not())) 
  } 

  if(filterCount > 0) {
    bg = bg.multiply(annualPercentile.select('count').min().gt(filterCount));
  }

  if(options.useSwbdMask) {
    bg = bg.multiply(swbdMask.gt(0))
  }

  results.push(bg);


  // surface water change
  if(refine) {
    if(options.debug) {
      var maskBufferVis = maskBuffer.mask(maskBuffer).visualize({palette:['ffffff', '000000'], opacity:0.5})
      results.push(maskBufferVis);
    }
    
    var edgeWater = getEdge(mask.mask(scale.gt(0))).visualize({palette: '00d8ff'})
    var edgeLand = getEdge(mask.mask(scale.lt(0))).visualize({palette: '00ff00'})

    scale = scale.mask(maskRefined)

    var scaleRefined = scale.visualize({
      min: -slopeThreshold * slopeThresholdRatio,
      max: slopeThreshold * slopeThresholdRatio,
      palette: ['00ff00', '000000', '00d8ff'],
      opacity: showEdges ? 0.3 : 1.0
    })

    results.push(scaleRefined)
    
    if(showEdges) {
      results.push(edgeWater, edgeLand)
    }
    
  } else {
    scale = scale.mask(mask)

    var change = scale.visualize({
      min: -slopeThreshold * slopeThresholdRatio,
      max: slopeThreshold * slopeThresholdRatio,
      palette: ['00ff00', '000000', '00d8ff'],
      opacity: 0.9
    })

    results.push(change);
  }

  return {changeVis: ee.ImageCollection.fromImages(results).mosaic(), change: scale};
}

function computeAggregatedSurfaceWaterChangeArea(scale, options) {
    // add aggregated version of change
    var changeAggregatedWater = scale.gt(0).multiply(ee.Image.pixelArea())
      .reproject('EPSG:4326', null, 30)
      .reduceResolution(ee.Reducer.sum(), false, 100)
      .reproject('EPSG:4326', null, 300)

    var changeAggregatedLand = scale.lt(0).multiply(ee.Image.pixelArea())
      .reproject('EPSG:4326', null, 30)
      .reduceResolution(ee.Reducer.sum(), false, 100)
      .reproject('EPSG:4326', null, 300)

    var maxArea = 300
    var changeAggregatedWaterVis = changeAggregatedWater
      .visualize({
        min: 0,
        max: maxArea,
        palette: ['000000', '00d8ff'],
      })

    var changeAggregatedLandVis = changeAggregatedLand
      .visualize({
        min: 0,
        max: maxArea,
        palette: ['000000', '00ff00'],
      })

    Map.addLayer(changeAggregatedWater, {}, 'scale aggregated water (raw)', false)
    Map.addLayer(changeAggregatedLand, {}, 'scale aggregated land (raw)', false)
    
    Map.addLayer(changeAggregatedWaterVis.mask(changeAggregatedWater.divide(maxArea)), {}, 'change aggregated (water => land)', false)
    Map.addLayer(changeAggregatedLandVis.mask(changeAggregatedLand.divide(maxArea)), {}, 'change aggregated (land => water)', false)
    
    return {water: changeAggregatedWater, land: changeAggregatedLand};
}

function getWaterTrendChangeRatio(start, stop) {
  return (15 / (stop - start));  // empiricaly found ratio
}

/***
 * Computes export video / image parameters: scale, rect.
 */
function generateExportParameters(bounds, w, h) {
  bounds = ee.Geometry(bounds).bounds()
  w = ee.Number(w)
  h = ee.Number(h)
  
  // get width / height
  var coords = ee.List(bounds.coordinates().get(0))
  var ymin = ee.Number(ee.List(coords.get(0)).get(1))
  var ymax = ee.Number(ee.List(coords.get(2)).get(1))
  var xmin = ee.Number(ee.List(coords.get(0)).get(0))
  var xmax = ee.Number(ee.List(coords.get(1)).get(0))
  var width = xmax.subtract(xmin)
  var height = ymax.subtract(ymin)

  // compute new height, ymin, ymax and bounds
  var ratio = w.divide(h)
  var ycenter = ymin.add(height.divide(2.0))

  height = width.divide(ratio)
  ymin = ycenter.subtract(height.divide(2.0))
  ymax = ycenter.add(height.divide(2.0))
  
  bounds = ee.Geometry.Rectangle(xmin, ymin, xmax, ymax)
  
  var scale = bounds.projection().nominalScale().multiply(width.divide(w))

  return {scale: scale, bounds: bounds}  
}

// ======================================================= PARAMETERS AND SCRIPT

// start / stop times and averaging periods (in months)
var time0 = [ee.Date.fromYMD(1984, 1, 1), 180];
// var time0 = [ee.Date.fromYMD(1984, 1, 1), 240];
var time1 = [ee.Date.fromYMD(2013, 1, 1), 48];

var options = {
  // intervals used for averaging and linear regression (web site may use multiple intervals here)  
  dateIntervals: [
    [time0[0], time0[0].advance(time0[1], 'month')],
    //[time0[0].advance(12, 'month'), time0[0].advance(time0[1]+12, 'month')], 
    //[time1[0].advance(-12, 'month'), time1[0].advance(time1[1]-12, 'month')], 
    [time1[0], time1[0].advance(time1[1], 'month')]
  ],

  percentile: 25,

  slopeThreshold: 0.025,
  slopeThresholdRatio: getWaterTrendChangeRatio(1984, 2013),

  slopeThresholdRefined: 0.015,

  refine: true, // more expensive
  //refine: false,
  refineFactor: 5,

  // ndviFilter: 0.15, // the highest NDVI value for water
  ndviFilter: -1,

  ndwiMinWater: -0.05, // minimum value of NDWI to assume as water
  ndwiMaxLand: 0.5, // maximum value of NDWI to assume as land

  filterCount: 0,
  
  //useSwbdMask: true,
  useSwbdMask: false,
  
  showEdges: true,
  // showEdges: false,

  // includeBackgroundSlope: false,
  includeBackgroundSlope: true,

  backgroundSlopeOpacity: 0.5,

  // mask by AND of all band masks
  //maskBandMasks: true,
  maskBandMasks: false,

  //smoothen: false,
  smoothen: true,

  //debug: false, // shows a buffer used to refine changes
  debug: false,
  //debugMapLayers: true,
  debugMapLayers: false,

  sharpen: true,
  //sharpen: false,
}

print(options.dateIntervals[0][0].format('YYYY-MM-dd').getInfo() + ' - ' + options.dateIntervals[0][1].format('YYYY-MM-dd').getInfo())
print(options.dateIntervals[1][0].format('YYYY-MM-dd').getInfo() + ' - ' + options.dateIntervals[1][1].format('YYYY-MM-dd').getInfo())

// background
Map.addLayer(ee.Image(1).toInt(), {palette:['000000']}, 'bg (black)', false)
Map.addLayer(ee.Image(1).toInt(), {palette:['ffffff']}, 'bg (white)', false)

// average images
var timeCount = options.dateIntervals.length
options.start = options.dateIntervals[0][0]
options.stop = options.dateIntervals[0][1]
Map.addLayer(renderLandsatPercentile(options), {}, options.start.format('YYYY-MM-dd').getInfo(), false);

var n = options.dateIntervals.length - 1;
options.start = options.dateIntervals[n][0]
options.stop = options.dateIntervals[n][1]
Map.addLayer(renderLandsatPercentile(options), {}, options.start.format('YYYY-MM-dd').getInfo(), false);

// country boundaries
Map.addLayer(countries.map(function(f) { return f.buffer(15000) }), {}, 'countries', false)

// GLCF water
var waterGLCF = glcf.map(function(i){return i.eq(2)}).mosaic()
Map.addLayer(waterGLCF.mask(waterGLCF), {palette:['2020aa'], opacity: 0.7}, 'GLCF water', false)

// surface water change trend
var trend1 = renderWaterTrend(options);
Map.addLayer(trend1.changeVis, {}, '1987 - 2015 (water change)', false);


var areaOfInterest = [
  {
    name: "Dubai",
    compute: vs_dubai,
    extent: vs_extent_dubai,
    refine: false
  }, 
  {
    name: "Three Gorges Dam",
    compute: vs_three_gorges,
    extent: vs_three_gorges,
    refine: false
  }, 
  {
    name: "Yellow_Sea",
    compute: vs_yellowsea, 
    extent: vs_yellowsea_extent,
    refine: false
  },
  {
    name: "Ganges_delta",
    compute: vs_brahmaputra, 
    extent: vs_brahmaputra_extent, 
    refine: false
  },
  {
    name: "Taji_Najer",
    compute: vs_taji_najer, 
    extent: vs_taji_najer_extent,
    refine: true
  },
  {
    name: "North_Korea",
    compute: vs_korea,   
    extent: vs_korea_extent,
    refine: true
  },
  {
    name: "Myanmar",
    compute: vs_myanmar,
    extent: vs_myanmar_extent,
    refine: false
  },
  {
    name: "Myanmar Reservoirs",
    compute: vs_myanmar_reservoirs,
    extent: vs_myanmar_extent,
    refine: false
  },
  {
    name: "Aral_Lake",
    compute: vs_aral_lake, 
    extent: vs_aral_lake, 
    refine: false
  },
  {
    name: "Lake_Mead",
    compute: vs_lake_mead,
    extent: vs_lake_mead_extent,
    refine: true
  },   
  {
    name: "Singapore",
    compute: vs_singapore,
    extent: vs_singapore,
    refine: true
  }
];

var aoi = areaOfInterest[0];
function exportAoi(aoi) {
  var w = 3640;
  var h = 2160;

  var exportParameters = generateExportParameters(aoi.extent.geometry().bounds(), w, h)

  options.refine = aoi.refine
  
  var img = ee.ImageCollection.fromImages([
    renderLandsatPercentile(options),
    trend1.changeVis,
    ]).mosaic()
  Map.addLayer(img.clip(exportParameters.bounds), {}, aoi.name);
  Map.centerObject(aoi.extent);
  
  Export.image.toDrive({
    image: img,
    description: aoi.name,
    scale: exportParameters.scale.getInfo(),
    region: exportParameters.bounds
  });

  // video
  var w = 1024;
  var h = 768;
  var exportParameters = generateExportParameters(aoi.extent.geometry().bounds(), w, h)

  var start = '2015-01-01'
  var stop = '2016-05-01'
  var bands = ['swir1', 'nir', 'green'];
  var bandsL8 = ['B6', 'B5', 'B3']
  var bandsL7 = ['B5', 'B4', 'B2']
  var b = exportParameters.bounds.centroid()
  var l8 = new ee.ImageCollection('LANDSAT/LC8_L1T_TOA').filterBounds(b).filterDate(start, stop).select(bandsL8, bands);
  var l7 = new ee.ImageCollection('LANDSAT/LE7_L1T_TOA').filterBounds(b).filterDate(start, stop).select(bandsL7, bands);
  var l5 = new ee.ImageCollection('LANDSAT/LT5_L1T_TOA').filterBounds(b).filterDate(start, stop).select(bandsL7, bands);
  var l4 = new ee.ImageCollection('LANDSAT/LT4_L1T_TOA').filterBounds(b).filterDate(start, stop).select(bandsL7, bands);
  var images = ee.ImageCollection(l8.merge(l7).merge(l5).merge(l4))
  
  images = images.map(function(i) { return i.visualize({min: 0.05, max: [0.4, 0.4, 0.5], gamma: 1.4}) })
  
  print('Video bounds: ', exportParameters.bounds)

  Export.video.toDrive({
    collection: images, 
    description: aoi.name, 
    fileNamePrefix: aoi.name, 
    framesPerSecond: 5, 
    dimensions: w.toString() + 'x' + h.toString(), 
    region : exportParameters.bounds,
  })
}   

///areaOfInterest.forEach(exportAoi);

exportAoi(areaOfInterest[0])

return

function totalArea(aoi) {
  print(aoi.name)
  var totalLand = ee.Number(land300.reduceRegion(ee.Reducer.sum(), aoi.compute.geometry(), 300).get('b1')).multiply(100).divide(1000000)
  var totalWater = ee.Number(water300.reduceRegion(ee.Reducer.sum(), aoi.compute.geometry(), 300).get('b1')).multiply(100).divide(1000000)

  print('land: ', totalLand)
  print('water: ', totalWater)
}

// areaOfInterest.map(totalArea)

// set map options
Map.setOptions('SATELLITE')

// center to a specific location
print(Map.getCenter())

Map.addLayer(srtm, {}, 'srtm', false)

Map.addLayer(hand1000.mask(change.gt(0)), {min:0, max:100}, 'hand (water)', false)

function analyzeThreeGorgesDam() {
  // compute total area for Three Gorges Dam:
  function estimateReservoirArea(damHeight) {
    var z0 = 62 // SRTM value at the dam before contruction
    
    var res = srtm.mask(srtm.subtract(z0).lt(damHeight))

    Map.addLayer(res, {min:0, max:damHeight}, 'Three Gorges Depth, dam height = ' + damHeight, false)

    var area = ee.Number(
      res.mask()
        .multiply(ee.Image.pixelArea())
        .reduceRegion({reducer: ee.Reducer.sum(), geometry: vs_three_gorges.geometry(), scale: 60, maxPixels: 1e8})
          .get('elevation')
    )
    
    return area.divide(1000000).round()
  }

  print('Three Gorges Reservoir, potential total area: H [m], A [km²]')
/*
  for (var z = 0; z <= 200; z+=20) {
    print(z + ',' + estimateReservoirArea(z).getInfo())
  }
*/

  // after construction, 632km2, http://ma-yue.net/wp-content/uploads/science2008aug1-china.pdf
  print('H = 94 (SRTM = 156), Area =', estimateReservoirArea(94))

  print('H = 113 (SRTM = 175), Area =', estimateReservoirArea(113))
  
  
  // add HAND = 18
  var handTh = 18
  Map.addLayer(fa.mask(fa.gt(10000)), {min:0, max:10000}, 'FA (0-10000)', false)
  var faMask = fa.gt(10000).focal_max(600, 'circle', 'meters');
  Map.addLayer(faMask.mask(faMask), {min:0, max:10000}, 'FA (0-10000), buffer 600m', false)
  
  Map.addLayer(hand1000, {min:0, max:100}, 'HAND (0-100)', false)
  
  var beforeReservoir = hand1000.mask(hand1000.lt(handTh).multiply(faMask))
  Map.addLayer(beforeReservoir, {min:0, max:1, palette:['ffffff']}, 'Three Gorges Depth, HAND < ' + handTh)
  
  // HAND (~level 0) area:
  var area = ee.Number(
    beforeReservoir.mask()
      .multiply(ee.Image.pixelArea())
      .reduceRegion({reducer: ee.Reducer.sum(), geometry: vs_three_gorges.geometry(), scale: 60, maxPixels: 1e8})
        .get('b1')
  ).divide(1000000).round()
  
  print('HAND, H=0, area:', area)

  // GLCF water
    var area = ee.Number(
    waterGLCF
      .multiply(ee.Image.pixelArea())
      .reduceRegion({reducer: ee.Reducer.sum(), geometry: vs_three_gorges.geometry(), scale: 60, maxPixels: 1e8})
        .get('water')
  ).divide(1000000).round()
  
  print('GLCF area:', area)

  
}

// analyzeThreeGorgesDam()
