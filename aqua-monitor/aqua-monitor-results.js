/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var scale = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48"),
    noise = /* color: d63000 */ee.Geometry.MultiPolygon(
        [[[[95.7568359375, 70.48089578887483],
           [93.515625, 72.12119180464839],
           [93.251953125, 72.0739114882038],
           [95.42724609375, 70.46620742226558]]],
         [[[90.6591796875, 69.60354921683602],
           [91.845703125, 69.93783902132799],
           [88.41796875, 71.3500412872444],
           [87.64892578125, 71.23728930162324]]],
         [[[99.47021484375, 66.40795547978847],
           [101.5576171875, 68.31002672261663],
           [100.4150390625, 70.4367988185464],
           [96.26220703125, 70.31873847853122],
           [92.5048828125, 70.04309814378466],
           [91.69189453125, 69.41124235697256],
           [92.30712890625, 68.15520923883975],
           [92.9443359375, 66.86971519466502],
           [95.09765625, 66.133854089549]]],
         [[[132.088623046875, 52.46939684276206],
           [132.1820068359375, 52.54963607438228],
           [132.308349609375, 52.70634714950863],
           [132.3468017578125, 52.84259457223949],
           [132.2698974609375, 52.87907622876888],
           [132.3028564453125, 52.948637884883205],
           [132.4456787109375, 53.02469631686729],
           [132.637939453125, 53.11710851455023],
           [133.0499267578125, 54.05616356873161],
           [129.4024658203125, 54.13347814286039],
           [129.74853515625, 53.51418452077113],
           [131.055908203125, 52.90227586168311],
           [132.1710205078125, 52.89896238858777],
           [132.1435546875, 52.80940281068805],
           [131.9403076171875, 52.48947038534303]]],
         [[[132.5830078125, 54.61661705439048],
           [133.8134765625, 55.021724521530594],
           [134.395751953125, 56.49889156789073],
           [134.208984375, 58.16490792851806],
           [131.561279296875, 58.17649609452154],
           [127.430419921875, 56.401744392758964],
           [127.6171875, 55.912272930063615],
           [129.814453125, 54.788017348178926],
           [131.484375, 54.749990970226925]]],
         [[[129.287109375, 65.54936668811528],
           [128.7158203125, 66.7745857647255],
           [128.759765625, 67.59247495012802],
           [129.0673828125, 68.5924865825295],
           [129.4189453125, 69.58056349224898],
           [127.1337890625, 69.64180371719553],
           [126.3427734375, 67.7760253890732],
           [126.650390625, 66.33750501996519],
           [128.2763671875, 65.36683689226321]]],
         [[[141.11613150292487, 66.59311675836712],
           [140.36843636389995, 67.20738489075478],
           [139.5228011239451, 67.6466499361934],
           [139.2523973805396, 67.96427056833],
           [138.81007606721425, 68.5759242524506],
           [137.78746247622507, 68.82639284254327],
           [138.16687512300223, 68.09737360595437],
           [137.427978515625, 67.79679286550042],
           [137.900390625, 67.067433351083],
           [138.2080078125, 65.87472467098549],
           [138.8671875, 65.10914820386473],
           [140.4931640625, 64.56731900988225],
           [143.23755109287015, 64.88576914779992],
           [145.60705614130143, 64.75632003221492],
           [147.87706122045415, 63.90786807793431],
           [147.94511246739694, 64.13158500697627],
           [146.70524584282248, 64.93370024527962],
           [146.3095821083184, 65.42941163495033],
           [145.3723949689894, 65.44152292195541],
           [143.1655653065958, 66.0842809510845]]],
         [[[-50.800783250000165, 55.97379820507665],
           [-15.719299365190409, 63.08027821242223],
           [-6.855470750000222, 81.69784444971418],
           [-79.8798762022256, 83.29518769984901],
           [-126.82617587500033, 74.16408546675687],
           [-70.83984575000017, 75.78054535323862],
           [-61.611328125, 74.913708156753]]],
         [[[-67.91748046875, 70.34831755984781],
           [-70.3564453125, 71.24435551310671],
           [-78.93691099123839, 76.68778101358659],
           [-91.08978701746162, 76.07215139289495],
           [-82.59521484375, 69.93030017617484],
           [-74.46533203125, 68.48798437299908],
           [-70.15869140625, 67.26355190165563]]],
         [[[-84.814453125, 65.54027041907463],
           [-84.96826171875, 64.90491004905083],
           [-85.07513932927293, 64.51480654739696],
           [-84.26513671875, 64.44437240555092],
           [-82.37548828125, 64.26368374017734],
           [-80.52978515625, 64.98865082457425]]],
         [[[-84.19921875, 68.43958884179992],
           [-85.3857421875, 68.67254350285471],
           [-86.98974609375, 67.6343168308615],
           [-86.572265625, 67.09310451852075],
           [-85.0341796875, 67.48333834982645]]],
         [[[-69.554443359375, 65.55845978217837],
           [-76.83837890625, 65.5129625532949],
           [-78.06884765625, 64.61445899874353],
           [-77.255859375, 64.20637724320852],
           [-70.83984375, 62.855145537741826]]],
         [[[-71.25732421875, 62.73460087706359],
           [-65.63232421875, 61.52269494598358],
           [-63.18689742100668, 62.94534078881193],
           [-66.33544921875, 66.08045694353868],
           [-68.642578125, 66.46943736242146],
           [-71.455078125, 63.411197723659235],
           [-71.2353515625, 62.80497854914798]]],
         [[[-69.9169921875, 60.73768583450925],
           [-73.564453125, 62.88520467163244],
           [-78.50830078125, 64.36843760829055],
           [-80.88321134419914, 62.44568067898031],
           [-79.5849609375, 60.500525410511315],
           [-75.08056640625, 59.01794033995246],
           [-73.30078125, 59.22093407615045],
           [-69.8291015625, 59.29955167361263]]],
         [[[-134.40673828125, 64.51064316846676],
           [-134.75830078125, 65.23830662451157],
           [-135.41748046875, 65.33017791526855],
           [-137.98828125, 65.43086722230728],
           [-138.49365234375, 66.70951301313733],
           [-140.34889061841147, 66.86328521632866],
           [-142.20703125, 65.54936668811528],
           [-144.744873046875, 65.51751585017615],
           [-145.799560546875, 64.9188850328549],
           [-144.832763671875, 64.21593657413428],
           [-141.185302734375, 63.47505152377611],
           [-136.702880859375, 63.690117922947515]]],
         [[[-137.30712890625, 59.98250201795759],
           [-135.758056640625, 59.84481485969105],
           [-134.560546875, 60.500525410511315],
           [-132.49715000302842, 61.15476785068821],
           [-137.098388671875, 62.29347354705664],
           [-137.5927734375, 62.608508075133734],
           [-141.3720703125, 63.084813777017395],
           [-142.899169921875, 63.05495931065108],
           [-144.085693359375, 62.375090868569195],
           [-143.41552734375, 61.944118091023746],
           [-143.382568359375, 60.694695372877476],
           [-142.53662109375, 60.59236229839579],
           [-140.25146484375, 60.70544838111038]]],
         [[[-167.266845703125, 59.706555811426135],
           [-167.1240234375, 60.07306302517328],
           [-167.3822021484375, 60.29974250173089],
           [-168.101808640625, 60.99708660319871],
           [-168.85986328125, 60.06484046010452],
           [-169.3707295390625, 58.7881319423644],
           [-167.4700927734375, 59.7037847864095]]],
         [[[-70.653076171875, 53.61532092575061],
           [-70.4168701171875, 54.178511788181325],
           [-70.29052734375, 54.537019638851795],
           [-70.751953125, 54.6992335284814],
           [-71.1199951171875, 54.08517342088679],
           [-71.47705078125, 53.48804553605621],
           [-72.158203125, 52.093007639638245],
           [-71.795654296875, 52.045734040341316]]],
         [[[24.7357177734375, 60.721571151655816],
           [26.334228515625, 60.82884973756657],
           [28.0535888671875, 61.35198012139041],
           [28.663330078125, 62.431074232920906],
           [28.740234375, 63.675505883656584],
           [25.77392578125, 63.792191443824485],
           [22.4395751953125, 61.00773834903184],
           [20.9454345703125, 61.044991332276346],
           [19.75341796875, 60.59775635343141],
           [20.4345703125, 59.52874722863427],
           [21.97265625, 59.32758544549428],
           [23.8238525390625, 59.56215805601119]]],
         [[[28.135986328125, 59.65664225341024],
           [28.4326171875, 59.78405142812333],
           [28.861083984375, 59.82273188377389],
           [29.256591796875, 59.85585085709834],
           [29.3280029296875, 59.91648345450877],
           [29.564208984375, 60.0017326727934],
           [29.959716796875, 60.094979847052144],
           [29.77294921875, 60.19888593179812],
           [29.2071533203125, 60.24253770324797],
           [28.2183837890625, 60.02095215374802],
           [26.883544921875, 59.684381187518156],
           [26.839599609375, 59.50366735715106],
           [27.3614501953125, 59.47856883192639],
           [28.1414794921875, 59.50087955346417]]],
         [[[96.0205078125, 51.67936786087718],
           [96.778564453125, 51.883272964437474],
           [95.82275390625, 52.34205163638784],
           [95.064697265625, 52.38901106223458],
           [94.515380859375, 52.52958999943302],
           [93.955078125, 52.92215137976296],
           [93.328857421875, 52.87576098184731],
           [93.394775390625, 52.335339071889386],
           [94.3505859375, 52.10650519075632],
           [95.625, 51.801821500783056]]],
         [[[97.349853515625, 52.83595824834852],
           [97.613525390625, 52.032218104145294],
           [97.470703125, 50.51342652633956],
           [98.250732421875, 50.324422739309384],
           [98.997802734375, 50.59021193935192],
           [99.173583984375, 51.50190410761811],
           [99.4921875, 51.57024144581124],
           [99.7119140625, 51.34433866059924],
           [100.21728515625, 50.98609893339354],
           [101.239013671875, 51.6248374617432],
           [102.359619140625, 51.78823192706476],
           [101.656494140625, 52.59637465946704],
           [100.92041015625, 53.45534913802113],
           [98.865966796875, 53.87196345747181],
           [95.5810546875, 54.62933821655576],
           [94.713134765625, 54.39335222384589],
           [94.74609375, 53.86548550842128],
           [94.2626953125, 53.45534913802113],
           [94.94384765625, 53.3177490474909],
           [95.921630859375, 53.05442186546102]]],
         [[[125.04638671875, 53.68369534495075],
           [126.5625, 53.87844040332884],
           [127.9248046875, 53.48804553605621],
           [128.12255859375, 53.86548550842128],
           [127.11181640625, 54.521081495443596],
           [125.595703125, 55.07836723201514],
           [124.0576171875, 54.686534234529695],
           [122.98095703125, 56.26776108757582],
           [120.76171875, 57.7041472343419],
           [117.66357421875, 58.893295755879514],
           [115.9716796875, 58.321029869251966],
           [116.1474609375, 57.338381265528966],
           [118.125, 55.801280971180454],
           [119.42138671875, 56.98091142454479],
           [119.091796875, 53.86548550842128],
           [119.11376953125, 51.56341232867588],
           [120.52001953125, 50.20503326494332],
           [122.080078125, 51.69979984974196]]],
         [[[151.32568359375, 61.433514513299485],
           [151.50146484375, 61.78870733190915],
           [150.545654296875, 62.02668187811478],
           [149.996337890625, 61.88204837973591],
           [149.83154296875, 61.76792628648649],
           [150.99609375, 61.37567331572747]]],
         [[[150.09521484375, 62.226996036319754],
           [149.65576171875, 62.46664555258511],
           [148.86474609375, 62.27303454787818],
           [149.095458984375, 61.8665112570728],
           [149.3701171875, 61.80947433658818],
           [149.490966796875, 61.95961583829658]]],
         [[[158.214111328125, 61.80947433658818],
           [159.620361328125, 62.201388691814294],
           [161.026611328125, 62.492027730426905],
           [161.971435546875, 62.890211535509664],
           [162.9052734375, 63.33734318229696],
           [162.652587890625, 64.11060221954631],
           [161.630859375, 64.21115732127653],
           [159.8291015625, 63.74363097533545],
           [158.9501953125, 62.89521754488204],
           [156.785888671875, 62.573105784499774],
           [155.80810546875, 61.53840616716745],
           [156.29150390625, 61.28607149103046]]],
         [[[162.3779296875, 61.74193022461818],
           [162.39990234375, 62.11929912110062],
           [160.301513671875, 61.70029083832628],
           [161.03759765625, 61.30190220337446]]],
         [[[11.29119873046875, 46.89210855010365],
           [11.37908935546875, 47.09817500706038],
           [11.16485595703125, 47.284818765649284],
           [10.71441650390625, 47.04018214480667],
           [10.70068359375, 46.78313532151751],
           [11.0906982421875, 46.76808718675661]]],
         [[[12.3980712890625, 46.758679967095574],
           [12.60406494140625, 46.87709089874481],
           [12.804350675098249, 46.85097936981182],
           [13.03802490234375, 46.98212617904094],
           [12.908935546875, 47.1355562723592],
           [12.337646484375, 47.11313066447019],
           [11.51092529296875, 46.73797830155204],
           [11.38458251953125, 46.502173483540716],
           [11.63726806640625, 46.47002468938531]]],
         [[[56.53564453125, 67.7094454829218],
           [57.2607421875, 69.09993967425089],
           [52.93212890625, 69.64180371719553],
           [50.29541015625, 68.55235079759059],
           [49.81201171875, 67.80094414922864],
           [53.5693359375, 67.43279781521774]]],
         [[[121.57470703125, 73.75735240210412],
           [126.298828125, 74.3014092218982],
           [121.00372984397836, 75.15944738422974],
           [114.5654296875, 75.4585892414553],
           [112.91748046875, 74.93656682526164],
           [112.56591796875, 74.77584300649237],
           [114.169921875, 74.35482803013984],
           [115.99365234375, 74.78737860165961],
           [114.63134765625, 74.07992472707889],
           [118.27880859375, 73.70194774691714],
           [119.42138671875, 73.52839948765174]]],
         [[[133.330078125, 71.48308562053703],
           [138.251953125, 73.1758971742261],
           [140.361328125, 73.83705790733424],
           [141.8115234375, 74.1160468394894],
           [144.228515625, 73.56573904345419],
           [141.064453125, 72.72495784202393],
           [151.69921875, 74.3192352189468],
           [155.126953125, 76.39331166244496],
           [146.1181640625, 77.29320180280091],
           [134.912109375, 76.63922560965885],
           [124.4091796875, 74.52575231463916],
           [125.650634765625, 73.89811065820952],
           [127.08984375, 73.36249421421914],
           [128.067626953125, 73.3719282862579],
           [128.594970703125, 73.10579967373414],
           [129.1497802734375, 72.64156989646774],
           [129.122314453125, 72.32746220331909],
           [128.155517578125, 72.46203877644956],
           [127.562255859375, 72.41231171605129],
           [127.08984375, 72.36244812858165],
           [127.59521484375, 72.0908111817211],
           [130.18798828125, 71.53187073776816]]],
         [[[171.134033203125, 60.51675086553633],
           [173.353271484375, 60.925093815014655],
           [176.824951171875, 62.083314862947944],
           [178.736572265625, 62.54272737585266],
           [178.681640625, 63.213829705155625],
           [176.15478515625, 63.616982339758295],
           [174.61669921875, 63.342272727869],
           [172.869873046875, 63.06491420208558],
           [172.979736328125, 63.28306240110864],
           [174.364013671875, 63.966318784384235],
           [172.869873046875, 64.13936944203154],
           [170.518798828125, 63.79704289805786],
           [166.629638671875, 60.94644199944751],
           [167.607421875, 60.764525674175374],
           [169.4091796875, 60.76989094827325],
           [170.068359375, 60.66241476534369],
           [170.17822265625, 61.05828537037917]]],
         [[[165.618896484375, 64.57203668350101],
           [167.222900390625, 65.78475783804785],
           [166.585693359375, 66.38596097983562],
           [167.3876953125, 66.27127767491217],
           [169.573974609375, 66.5482634621744],
           [171.947021484375, 67.35678538806071],
           [171.6943359375, 67.5337715714045],
           [170.0244140625, 68.06509825098964],
           [167.84912109375, 68.48395536734631],
           [167.310791015625, 68.45573219584728],
           [168.046875, 67.69694069305432],
           [167.49755859375, 67.71361226740302],
           [167.047119140625, 67.75939813204413],
           [165.728759765625, 67.75108007583425],
           [166.717529296875, 67.46229284609464],
           [166.761474609375, 67.18699968023049],
           [165.992431640625, 66.99025646736109],
           [166.058349609375, 66.83948674792073],
           [166.585693359375, 66.39915999849539],
           [164.498291015625, 66.34191397701721],
           [161.224365234375, 66.28453710088559],
           [161.224365234375, 65.95094930095703],
           [161.949462890625, 65.78025122941293],
           [162.39990234375, 65.60387765860433],
           [161.795654296875, 65.61295172126665],
           [160.59814453125, 65.87023380203186],
           [160.015869140625, 65.70803822968016],
           [161.12548828125, 65.06286750655634],
           [161.510009765625, 64.3541764315921],
           [163.157958984375, 63.74363097533545],
           [163.7841796875, 63.78248603116502],
           [164.058837890625, 64.36843760829052]]],
         [[[172.012939453125, 66.03587344492607],
           [171.705322265625, 66.19600891267761],
           [171.112060546875, 65.93303449689425],
           [171.441650390625, 65.80277639340238]]],
         [[[-176.759033203125, 66.38596097983562],
           [-176.5283203125, 66.99884379185184],
           [-179.67041015625, 67.25505812564363],
           [-178.30810546875, 68.28565146003619],
           [-179.7802734375, 68.85559244803395],
           [177.528076171875, 69.08033463864336],
           [175.58349609375, 69.166465590243],
           [173.14453125, 68.74435062211467],
           [173.023681640625, 68.44362575999952],
           [174.13330078125, 67.5421666883853],
           [174.671630859375, 66.83948674792073],
           [174.5068359375, 65.5766364488888]]],
         [[[-168.486328125, 66.07154649351564],
           [-172.3974609375, 67.22105296735408],
           [-177.451171875, 65.25670649344259],
           [-173.0126953125, 63.09475846224106],
           [-170.5078125, 63.194018438087845],
           [-172.3095703125, 64.14895190024562]]],
         [[[-69.697265625, -55.89995614406812],
           [-69.334716796875, -54.788017348178926],
           [-69.3017578125, -54.438102809740165],
           [-71.246337890625, -53.54683559190011],
           [-72.61962890625, -51.34433866059923],
           [-72.7294921875, -50.1909677655856],
           [-72.66357421875, -49.553725513475776],
           [-72.454833984375, -49.14578361775003],
           [-72.0263671875, -48.327039130634766],
           [-71.949462890625, -47.798396672955235],
           [-71.78466796875, -47.36859434521338],
           [-71.817626953125, -47.025206001585374],
           [-71.78466796875, -46.65697731621612],
           [-71.773681640625, -45.89765453434689],
           [-71.9384765625, -45.66012730272194],
           [-71.817626953125, -44.96479793033101],
           [-71.927490234375, -44.134913443750726],
           [-71.488037109375, -43.59630591596548],
           [-71.30126953125, -42.20410749373318],
           [-71.202392578125, -41.50034959128927],
           [-71.34521484375, -39.73253798438172],
           [-71.43310546875, -39.18969082109678],
           [-72.31201171875, -40.15368685779403],
           [-72.432861328125, -40.58475654701268],
           [-72.7130126953125, -41.207588981810225],
           [-72.57568359375, -41.86956082699456],
           [-72.5042724609375, -42.15118709351197],
           [-72.6416015625, -42.51260171573666],
           [-72.8778076171875, -42.92827401776912],
           [-72.8009033203125, -43.09296067711628],
           [-72.8173828125, -43.28520334369382],
           [-72.8887939453125, -43.48481212891602],
           [-72.8009033203125, -43.782992628905795],
           [-72.9327392578125, -43.99676629896823],
           [-74.212646484375, -44.35527821160296],
           [-74.498291015625, -44.42201131423663],
           [-74.4049072265625, -44.77013681219716],
           [-74.564208984375, -45.46783598133374],
           [-74.9432373046875, -45.84028105450087],
           [-75.2838134765625, -46.18743678432542],
           [-75.7672119140625, -46.52485531103341],
           [-75.860595703125, -46.95401192579361],
           [-75.0421142578125, -46.95776134668865],
           [-74.564208984375, -46.91275095637892],
           [-74.44061279296875, -46.82449601026204],
           [-74.40216064453125, -46.719151706041224],
           [-74.168701171875, -46.68901548485151],
           [-74.03411865234375, -46.713502445999936],
           [-74.00390625, -46.77184961467733],
           [-74.07806396484375, -46.92025531537452],
           [-74.02587890625, -46.97088225099077],
           [-74.05609130859375, -47.008352816937034],
           [-74.4158935546875, -47.02707824931894],
           [-74.56695556640625, -47.35371061951362],
           [-74.8828125, -47.619124098197304],
           [-75.443115234375, -47.76702233051034],
           [-75.69854736328125, -48.195387408333374],
           [-75.750732421875, -48.77067246880508],
           [-75.8551025390625, -49.53946900793533],
           [-75.8111572265625, -50.62855775525791],
           [-75.52001953125, -51.82898836366912],
           [-75.1904296875, -52.95525697845466],
           [-73.80615234375, -54.15600109028491],
           [-71.69677734375, -55.31976875501021]]],
         [[[-109.57763671875, 71.61521389461222],
           [-109.35791015625, 71.86306997499314],
           [-109.84130859375, 72.23551372557404],
           [-112.30224609375, 72.21539079680856],
           [-113.88427734375, 71.8219859969296],
           [-113.75244140625, 71.42717893107371],
           [-113.203125, 71.30079291637452],
           [-111.37939453125, 71.52490903732816]]],
         [[[-122.7777099609375, 73.93767449179174],
           [-121.124267578125, 73.72967302053397],
           [-120.531005859375, 73.84928645675248],
           [-120.4156494140625, 74.04221243722003],
           [-121.981201171875, 74.44493890136494],
           [-123.0908203125, 74.44051907759072],
           [-124.1949462890625, 74.37407456738714],
           [-124.3377685546875, 74.28207543207257]]],
         [[[178.2147216796875, 70.96865539856438],
           [178.4454345703125, 70.75072302031474],
           [179.8681640625, 70.72716643272548],
           [-178.297119140625, 70.83926448002445],
           [-177.42919921875, 71.10610062134981],
           [-177.0831318828125, 71.31311675304123],
           [-177.7313252421875, 71.52664969984146],
           [-177.967531296875, 71.68093626319225],
           [-178.7200947734375, 71.80827136550005],
           [-179.5660420390625, 71.72232816987228],
           [179.813232421875, 71.60481588983644],
           [179.5001220703125, 71.4586464518894]]],
         [[[-141.95709228515625, 68.37085098819867],
           [-139.45585783146782, 68.61326776662716],
           [-138.944091796875, 68.9781050031802],
           [-140.020751953125, 69.53835857874444],
           [-141.185302734375, 69.36870264876849],
           [-142.71240234375, 69.565225901491],
           [-144.03076171875, 69.53067599275342],
           [-144.678955078125, 69.67998950911426],
           [-145.228271484375, 69.74094412836399],
           [-145.338134765625, 69.61120561869633],
           [-145.634765625, 69.48837239932325],
           [-146.40380859375, 69.39191653683379],
           [-147.117919921875, 69.29891084475162],
           [-147.98583984375, 69.22109966424794],
           [-147.81005859375, 69.0567854089922],
           [-148.095703125, 68.86747821724371],
           [-148.590087890625, 68.61252762353008],
           [-149.227294921875, 68.45169743691484],
           [-150.4248046875, 68.50811862333943],
           [-150.75439453125, 68.13066848687792],
           [-149.30419921875, 67.95814786101579]]],
         [[[-136.922607421875, 67.51277075847912],
           [-136.5380859375, 67.11020352269666],
           [-136.219482421875, 66.25358757512083],
           [-135.615234375, 65.9195901580262],
           [-135.15380859375, 66.05371622067922],
           [-135.087890625, 66.15606976270817],
           [-135.516357421875, 66.50888160186884],
           [-135.59326171875, 66.95587684341999],
           [-135.692138671875, 67.38637455894808],
           [-135.615234375, 67.89622050259646],
           [-135.670166015625, 68.04867651098903],
           [-136.25244140625, 68.19197126323203],
           [-136.6259765625, 68.3140867336998],
           [-136.9775390625, 68.51214331858073],
           [-137.57080078125, 68.40322416624196],
           [-137.724609375, 68.05278304131106],
           [-137.74658203125, 67.65103282074831],
           [-137.26318359375, 67.55475378638546]]],
         [[[62.9296875, 70.08056215839737],
           [66.796875, 72.44879155730672],
           [69.78515625, 73.77577986189993],
           [72.7734375, 74.06786624952264],
           [77.080078125, 73.72659470212254],
           [81.03515625, 74.1160468394894],
           [83.3203125, 74.68325030051864],
           [95.09765625, 77.42782352730111],
           [106.44663094404018, 77.94553885921901],
           [108.78766808981106, 77.21485767383132],
           [116.31457151400184, 76.22715954821008],
           [120.34972406325153, 76.45787450872415],
           [98.61328125, 81.54415925941508],
           [67.67578125, 78.45542534118533],
           [56.953125, 77.61770905279676],
           [46.40625, 74.21198251594369],
           [46.40625, 71.52490903732816],
           [51.15234375, 70.37785394109227],
           [56.25, 70.14036427207171],
           [59.326171875, 69.47296854140576]]],
         [[[5.178680419921875, 5.605052121404784],
           [5.18829345703125, 5.606418844830032],
           [5.21575927734375, 5.6187192115515465],
           [5.195159912109375, 5.576350191571288],
           [5.174560546875, 5.547646857881998],
           [5.185546875, 5.51620827103881],
           [5.206146240234375, 5.483401012975597],
           [5.230865478515625, 5.513474402007618],
           [5.2679443359375, 5.569516191569189],
           [5.28167724609375, 5.7184792043553365],
           [5.38604736328125, 6.029945016071819],
           [5.37506103515625, 6.25387182486021],
           [5.153961181640625, 6.296188782911237],
           [5.104522705078125, 6.25660205479493],
           [5.1031494140625, 6.192437893691238],
           [5.08941650390625, 6.150112578753815],
           [5.064697265625, 6.084569967945615],
           [5.077056884765625, 5.961656095137535],
           [5.104522705078125, 5.8141231418985],
           [5.130615234375, 5.6993484895144695],
           [5.148468017578125, 5.625552636402149]]],
         [[[5.442352294921875, 5.101887070062321],
           [5.33935546875, 5.066321981043081],
           [5.305023193359375, 4.9007819961205135],
           [5.33935546875, 4.725620698589213],
           [5.535736083984375, 4.770783772016471],
           [5.997161865234375, 4.861100978309971],
           [6.0809326171875, 4.893940608902126],
           [5.587921142578125, 5.1278756972037245]]],
         [[[6.767578125, 5.37539777447476],
           [6.229248046875, 5.267375376100507],
           [6.150970458984375, 5.240024939514719],
           [6.1358642578125, 5.186688149704451],
           [6.68243408203125, 5.074529483496559]]],
         [[[140.6085205078125, 68.07330474079025],
           [140.9051513671875, 68.27548740848279],
           [140.789794921875, 68.44564394914352],
           [140.306396484375, 68.41939344904868],
           [140.0152587890625, 68.33437594128185],
           [139.735107421875, 68.13885164925574],
           [140.16357421875, 68.0404612590484]]],
         [[[156.9287109375, 48.748945343432936],
           [155.478515625, 51.78823192706476],
           [153.028564453125, 52.079506003796965],
           [151.578369140625, 49.61782831211117],
           [156.1376953125, 48.03401915864286]]],
         [[[165.8056640625, 56.824932865007206],
           [164.0478515625, 57.42129439209407],
           [164.2236328125, 56.389583525613055],
           [162.6416015625, 55.40406982700609],
           [162.3779296875, 54.6992335284814],
           [161.455078125, 54.059387886623576],
           [161.6748046875, 53.592504809039376],
           [163.8720703125, 52.802761415419674]]],
         [[[-166.11328125, 50.17689812200105],
           [-161.5869140625, 55.3041377374014],
           [-162.5537109375, 57.468589192089325],
           [-168.57421875, 57.2315029914789],
           [-175.49560546875, 54.80068486732233],
           [-179.373779296875, 52.3688917060255],
           [-171.177978515625, 49.7315809334801]]],
         [[[-177.0556640625, 53.69670647530323],
           [168.837890625, 56.17002298293205],
           [167.1240234375, 51.013754657188215],
           [-179.9560546875, 50.092393210938795]]],
         [[[170.386962890625, 70.2055755505951],
           [171.881103515625, 70.25759653753673],
           [173.287353515625, 70.4147144526346],
           [173.82568359375, 70.66542571668694],
           [172.869873046875, 70.83024762385253],
           [171.0186767578125, 70.87709071918707],
           [168.7335205078125, 70.89867342969497],
           [166.7779541015625, 70.82122668403267],
           [166.2066650390625, 70.33907868638767],
           [169.5135498046875, 70.13663169260924]]],
         [[[176.044921875, 70.30393290852346],
           [178.5498046875, 72.00615835954679],
           [177.2314453125, 72.1279362810559],
           [175.517578125, 70.49557354093137]]],
         [[[135.4119873046875, -0.3186018737056562],
           [135.230712890625, -0.31310879311375667],
           [134.747314453125, -2.3559032430952285],
           [134.97802734375, -2.4382285969406796]]]]),
    land300m = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48_land_300m"),
    water300m = ee.Image("users/gena/AquaMonitor/water_changes_1985_240_2013_48_water_300m"),
    ne = ee.Image("users/gena/NE1_HR_LC_SR_W"),
    flowAccumulation = ee.Image("WWF/HydroSHEDS/15ACC"),
    coastline = ee.Image("users/gena/coastline_buffer_40km"),
    hand556 = ee.Image("users/gena/GlobalHAND/90m/hand-556"),
    fa_90 = ee.Image("users/gena/GlobalHAND/90m/fa"),
    scale2 = ee.Image("users/gena/AquaMonitor/water_changes_1999_48_2013_48_15p"),
    coastline40km = ee.Image("users/gena/coastline_buffer_40km");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
function radians(img) { return img.toFloat().multiply(Math.PI).divide(180); }

function hillshade(az, ze, slope, aspect) {
  var azimuth = radians(ee.Image(az));
  var zenith = radians(ee.Image(ze));
  return azimuth.subtract(aspect).cos().multiply(slope.sin()).multiply(zenith.sin())
      .add(zenith.cos().multiply(slope.cos()));
}

function hillshadeit(image, elevation, weight, height_multiplier) {
  var hsv  = image.unitScale(0, 255).rgbtohsv();

  var terrain = ee.call('Terrain', elevation.multiply(height_multiplier));
  var slope = radians(terrain.select(['slope']));
  var aspect = radians(terrain.select(['aspect']));
  var hs = hillshade(azimuth, zenith, slope, aspect);

  var intensity = hs.multiply(weight).multiply(hsv.select('value'));
  var huesat = hsv.select('hue', 'saturation');
  
  return ee.Image.cat(huesat, intensity).hsvtorgb();
}

var hand100 = ee.ImageCollection("users/gena/global-hand/hand-100")
var hand1000 = ee.ImageCollection.fromImages([
    ee.Image("users/gena/GlobalHAND/30m/hand-1000"),
    ee.Image("users/gena/GlobalHAND/90m/hand-111")
    ]).mosaic()

hand1000 = hand1000.mask(hand1000.neq(-99999))

var handThreshold = 150;
var handClosingBuffer = 1200;
var slopeThreshold = 20
var slopeClosingBuffer = 120;

var noiseMask = ee.Image(0).toByte().paint(noise, 1)

var handMask100 = 
  hand100.mosaic().lt(handThreshold)

var handMask1000 = 
  hand1000.lt(handThreshold)

var handMask100Closed = 
  hand100.mosaic().gt(handThreshold)
      .focal_max(handClosingBuffer, 'circle', 'meters').focal_min(handClosingBuffer, 'circle', 'meters').not()

// slope
var demImages = [
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM1').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM2').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM3').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM4').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM5').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM6').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM7').rename('elevation').add(0),
  ee.Image('users/gena/ViewfinderpanoramaDEM/VFP_DEM8').rename('elevation').add(0),
  ee.Image('USGS/SRTMGL1_003').rename('elevation').add(0)
];

// fix cache
var slope = ee.ImageCollection(demImages).map(function(i) { 
  var dem = i
  var terrain = ee.call('Terrain', dem);
  return terrain.select(['slope']);
}).mosaic()



/*
// sigmoid
var k = 0.4
var x0 = 25
var slopeMask = ee.Image.constant(1.0).divide(ee.Image.constant(Math.E).pow(slope.subtract(x0).multiply(-k)))
*/

var slopeMask = slope.gt(slopeThreshold)

var slopeMaskClosed = slopeMask
  .focal_max(slopeClosingBuffer, 'circle', 'meters')
  .focal_min(slopeClosingBuffer, 'circle', 'meters')

var azimuth = 60;
var zenith = 60;

var hs = ee.ImageCollection(demImages).map(function(i) { 
  var dem = i

  var terrain = ee.call('Terrain', dem);
  var slope = radians(terrain.select(['slope']));
  var aspect = radians(terrain.select(['aspect']));
  var hs = hillshade(azimuth, zenith, slope, aspect);
  
  return hs
}).mosaic()

// SWBD mask
var swbd = ee.Image('MODIS/MOD44W/MOD44W_005_2000_02_24').select('water_mask')
var swbdMask = swbd.unmask().not()
  .focal_max(20000, 'circle', 'meters').reproject('EPSG:4326', null, 10000)

Map.setOptions('SATELLITE')

var options = {percentile: 15, start: '1984-01-01', stop: '2004-01-01', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 15% (1984-2004)', false)

var options = {percentile: 15, start: '2013-01-01', stop: '2016-05-06', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 15% (2013-2016)', false)

var options = {percentile: 25, start: '1984-01-01', stop: '2004-01-01', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 25% (1984-2004)', false)

var options = {percentile: 25, start: '2013-01-01', stop: '2016-05-06', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 25% (2013-2016)', false)

var options = {percentile: 55, start: '1984-01-01', stop: '2004-01-01', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 55% (1984-2004)', false)

var options = {percentile: 55, start: '2013-01-01', stop: '2016-05-06', sharpen: true, smoothen: false, filterCount: 10};
Map.addLayer(renderLandsatPercentile(options), {}, 'composite, 55% (2013-2016)', false)

Map.addLayer(ne, {gamma:0.3}, 'NaturalEarth', false)

function desaturate(rgb, scale) {
  // expect 0-1 for rgb
  // Convert to HSV, swap in the pan band, and convert back to RGB.
  var hsv = rgb.rgbToHsv();
  var hue = hsv.select('hue');
  var sat = hsv.select('saturation');
  var val = hsv.select('value');
  var newSat = sat.multiply(scale);
  var rgbNew = ee.Image.cat(hue, newSat, val).hsvToRgb();
  return rgbNew;
  
}

// desaturate expects rgb in range 0-1, convert image from 0-255
var naturalEarthDesaturated = desaturate(
  ne.select('b1', 'b2', 'b3').unitScale(0, 255),
  0.1
);
Map.addLayer(naturalEarthDesaturated, {gamma: 0.3}, 'natural earth (desaturated)', false);

Map.addLayer(coastline, {}, 'coastline', false)

var bg = ee.Image(1).visualize({opacity :0.9, forceRgbOutput: true})
Map.addLayer(bg, {opacity:0.7}, 'bg')

var extendToCoastline = true;

var basinsLevel3 = ee.FeatureCollection('ft:13dShZ5yGqCEqk3dsJvYEL3lsa1hEmpMRldxK7aSa')

var bufferError = 1000

if(extendToCoastline) {
  // BUGS in HydroBasins / GEE, it buffers wrong directoion
  /*
  basinsLevel3 = basinsLevel3
    .map(function(f) { 
      var buffer = f.simplify(bufferError).buffer(15000, bufferError)
      var nearest = basinsLevel3.filterBounds(buffer).geometry()
      var coastPart = buffer.difference(nearest, bufferError)
      return buffer //  f.union(coastPart)
    })
  */
}

var bgBasinsMask = ee.Image(0).toByte().paint(basinsLevel3, 1)
var bgBasins = bgBasinsMask.visualize({opacity :0.9, forceRgbOutput: true})
bgBasins = bgBasins.mask(bgBasins)
Map.addLayer(bgBasins, {}, 'bg (basins)')

var basinsLeve3Outline = ee.Image(0).toByte().paint(basinsLevel3, 1, 1)
var basinsLeve3OutlineVis = basinsLeve3Outline.mask(basinsLeve3Outline)
  .visualize({opacity :0.9, forceRgbOutput: true, palette:['ffffff']})
Map.addLayer(basinsLeve3OutlineVis, {}, 'HydroBASINS L3 (outline)', false)


var countries = ee.FeatureCollection('ft:17mMrmy5DaEPNlPabZeKrTmY3e8cP7-qCFrrFyxk')
var countriesOutline = ee.Image(0).toByte().paint(countries, 1, 1)
var countriesOutlineVis = basinsLeve3Outline.mask(countriesOutline)
  .visualize({opacity :0.9, forceRgbOutput: true, palette:['ffffaa']})
Map.addLayer(countriesOutlineVis, {}, 'Countries (outline)', false)

// draw DEM contours
var min = 0
var max = 10
var step = 1
var levels = ee.List.sequence(min, max, step)

var contours = levels.map(function(level) {
  return ee.ImageCollection(demImages.map(function(i) { 
    var contour = i
      .resample('bicubic')
      .convolve(ee.Kernel.gaussian(5, 3))
      .subtract(ee.Image.constant(level)).zeroCrossing() // line contours
      // .gt(ee.Image.constatn(level)) // area
      .multiply(ee.Image.constant(level)).toFloat();
      
    return contour.mask(contour)
  })).mosaic();
})

contours = ee.ImageCollection(contours).mosaic()

Map.addLayer(contours, {min: min, max: max, palette:['00ff00', 'ff0000']}, 'contours', false)

Map.addLayer(hand100.mosaic().mask(hand100.mosaic().lt(3)), {palette:['e0e0ff', '4040ff'], opacity: 0.5}, 'water likelihood (HAND100 < 3m)', false)
Map.addLayer(hand1000.mask(hand1000.lt(3)), {palette:['e0e0ff', '4040ff'], opacity: 0.5}, 'water likelihood (HAND1000 < 3m)', false)


// print(Chart.image.histogram(scale, g1, 30, 200))

var maxArea = 500
var land = land300m
  //.focal_max(1).focal_min(1)
  .mask(land300m.multiply(land300m.gt(0)).divide(maxArea)
  .multiply(swbdMask)
  // .multiply(handMask100)
  //.multiply(handMask100Closed)
  .multiply(noiseMask.not()))

Map.addLayer(land, {min: 0, max: maxArea, palette: ['000000', '00ff00']}, 'land (300m)', true)

var water = water300m
  //.focal_max(1).focal_min(1)
  .mask(water300m.multiply(water300m.gt(0)).divide(maxArea)
    .multiply(swbdMask)
    // .multiply(handMask100)
    .multiply(noiseMask.not()))

Map.addLayer(water, {min: 0, max: maxArea, palette: ['000000', '00d8ff']}, 'water (300m)', true)


// high-res
var change = scale.visualize({ min: -0.02, max: 0.02, palette: ['00ff00', '000000', '00d8ff'], forceRgbOutput: true})
  //.mask(scale.mask().multiply(swbdMask))
Map.addLayer(change, {}, 'water / land change (1985 - 2016)', true)

var change2 = scale2.visualize({ min: -0.02, max: 0.02, palette: ['00ff00', '000000', '00d8ff'], forceRgbOutput: true})
  //.mask(scale.mask().multiply(swbdMask))
Map.addLayer(change2, {}, 'water / land change (1999 - 2016)', true)


// HAND, slope layers
var dem = ee.ImageCollection(demImages).mosaic()
Map.addLayer(dem, {min:0, max:1000}, 'dem', false)

Map.addLayer(hand100, {min: 0, max:150}, 'hand 100', false)
Map.addLayer(hand1000, {min: 0, max:150}, 'hand 1000', false)

Map.addLayer(handMask100.not().mask(handMask100.not()), {palette:['000000']}, 'HAND_100 > ' + handThreshold + 'm', false);
Map.addLayer(handMask100Closed.not().mask(handMask100Closed.not()), {palette:['000000']}, 'HAND_100 > ' + handThreshold + ' (+' + handClosingBuffer + 'm closing)', false);

Map.addLayer(handMask1000.not().mask(handMask1000.not()), {palette:['000000']}, 'HAND_1000 > ' + handThreshold + 'm', false);
Map.addLayer(hand1000.mask(hand1000.gt(150)), {palette:['000000'], opacity:0.8}, 'HAND_1000 > 150m', false);

var hand1000Closing = hand1000.gt(100)
    .focal_max(500, 'circle', 'meters').focal_min(500, 'circle', 'meters')
    .multiply(flowAccumulation.gt(100).focal_max(1000, 'circle', 'meters').not())
    
    
Map.addLayer(hand1000Closing.mask(hand1000Closing), {palette:['000000'], opacity:0.8}, 'HAND_30_1000 > 100m (closing 500m) - FA > 100 (erode 1000m)', false);

Map.addLayer(fa_90.mask(fa_90.gt(5000)), {palette:['6060aa', '6060ff'], min:0, max:100000}, 'FA90', false);
Map.addLayer(hand556.mask(hand556.gt(150)), {palette:['000000'], opacity:0.8}, 'HAND_90_556 > 150m', false);
Map.addLayer(hand556.mask(hand556.gt(50)), {palette:['000000'], opacity:0.8}, 'HAND_90_556 > 50m', false);

var hand556Closing = hand556.gt(100)
    .focal_max(1000, 'circle', 'meters').focal_min(1000, 'circle', 'meters')
Map.addLayer(hand556Closing.mask(hand556Closing), {palette:['000000'], opacity:0.8}, 'HAND_90_556 > 100m (closing 1000m)', false);

Map.addLayer(slope.mask(slopeMask), {palette:['ffffff','000000']}, 'slope > ' + slopeThreshold, false)
Map.addLayer(slope.mask(slopeMaskClosed), {palette:['ffffff','000000']}, 'slope > ' + slopeThreshold + ' (+' + slopeClosingBuffer + 'm closing)', false)
Map.addLayer(swbdMask.not().mask(swbdMask.not()), {}, 'swbd mask', false)

Map.addLayer(flowAccumulation.mask(flowAccumulation.gt(100)), {min: 100, max: 1000}, 'HydroSHEDS flow accumulation', false)

Map.addLayer(hs, {min:0, max:1, opacity:0.8}, 'hs', false);

var hs_mask = hs.lt(0.2);
var shadow_palette = ['fee0d2', 'fc9272', 'de2d26'];
Map.addLayer(hs.mask(hs_mask), {palette:shadow_palette, opacity:0.9}, 'hs mask', false);

// render nice result images

//var trend1Aggregated = computeAggregatedSurfaceWaterChangeArea(scaleWater, 30, 300, 100, 200,
//  swbdMask.multiply(handMask100).multiply(noiseMask.not()));

var xmin = -180, xmax = 180, ymin = -60, ymax = 85, dx = 40, dy = 40;
var rect = ee.Geometry.Rectangle([xmin, ymin, xmax, ymax], 'EPSG:4326', false)

var landVis = land.mask(land.divide(maxArea))
  .visualize({min: 0, max: maxArea, palette: ['000000', '00ff00']})

var landHalo = land.unmask().convolve(ee.Kernel.gaussian(5000, 3000, 'meters'))
landHalo = landHalo.mask(landHalo.divide(maxArea*0.5))
  .visualize({min: 0, max: maxArea*0.5, palette: ['000000', '00ff00']})

var image = ee.ImageCollection.fromImages([
  naturalEarthDesaturated.visualize({gamma:0.3}).rename(['r','g','b']),
  bg.visualize({opacity:0.6}).rename(['r','g','b']),
  bgBasins.visualize({opacity:0.6}).rename(['r','g','b']),
  landHalo.rename(['r','g','b']),
  landVis.rename(['r','g','b'])
  ]).mosaic()
  

var name = 'land'
Export.image(image, name, {format: 'png', dimensions: 1920, /*scale: 10000,*/ crs: 'EPSG:3857', region: JSON.stringify(rect.getInfo()), driveFileNamePrefix: name})
Map.addLayer(image, {}, 'land (rendered)', false)

var waterVis = water.mask(water.divide(maxArea))
  .visualize({min: 0, max: maxArea, palette: ['000000', '00d8ff']})

var waterHalo = water.unmask().convolve(ee.Kernel.gaussian(5000, 3000, 'meters'))
waterHalo = waterHalo.mask(waterHalo.divide(maxArea*0.5))
  .visualize({min: 0, max: maxArea*0.5, palette: ['000000', '00d8ff']})

var image = ee.ImageCollection.fromImages([
  naturalEarthDesaturated.visualize({gamma:0.3}).rename(['r','g','b']),
  bg.visualize({opacity:0.6}).rename(['r','g','b']),
  bgBasins.visualize({opacity:0.6}).rename(['r','g','b']),
  waterHalo.rename(['r','g','b']),
  waterVis.rename(['r','g','b'])
  ]).mosaic().visualize({forceRgbOutput:true})

var name = 'water'
Export.image(image, name, {dimensions: 1920, /*scale: 10000,*/ crs: 'EPSG:3857', region: JSON.stringify(rect.getInfo()), driveFileNamePrefix: name})
Map.addLayer(image, {}, 'water (rendered)', false)


var landMask = bgBasinsMask.focal_max(20000, 'circle', 'meters').reproject('EPSG:4326', null, 10000)

// heatmap
// heatmap from vector
var fc = ee.FeatureCollection('ft:17TEfjvF14hKeDmSotkXrjYeplyT8O_SgRLuJFbYk')

var bufferSize = 20000
var blurSize = 40000
var blurSigma = 30000
var maxArea = 750000

/*
var heatmapWater = fc
  .reduceToImage(['total_wate'], ee.Reducer.sum())
  .focal_max(bufferSize, 'circle', 'meters')
  .focal_mode(bufferSize, 'circle', 'meters', 3)
  .convolve(ee.Kernel.gaussian(blurSize, blurSigma, 'meters'));

var heatmapLand = fc
  .reduceToImage(['total_land'], ee.Reducer.sum())
  .focal_max(bufferSize, 'circle', 'meters')
  .focal_mode(bufferSize, 'circle', 'meters', 3)
  .convolve(ee.Kernel.gaussian(blurSize, blurSigma, 'meters'));
*/

var heatmapWater = water300m.mask(landMask)
  .reduceResolution(ee.Reducer.sum(), true, 100)
  .reproject(water300m.projection().scale(10, 10))
  .multiply(2500)
  .focal_max(bufferSize, 'circle', 'meters')
  .convolve(ee.Kernel.gaussian(blurSize, blurSigma, 'meters'));

var heatmapLand = land300m.mask(landMask)
  .reduceResolution(ee.Reducer.sum(), true, 100)
  .reproject(land300m.projection().scale(10, 10))
  .multiply(2500)
  .focal_max(bufferSize, 'circle', 'meters')
  .convolve(ee.Kernel.gaussian(blurSize, blurSigma, 'meters'));
  
  

var heatmapColors = ['000000', '00d8ff', 'aaffff']
var heatmapWaterVis = heatmapWater.mask(heatmapWater.divide(maxArea))
  .visualize({min:0, max:maxArea, opacity: 0.4, palette: heatmapColors})

Map.addLayer(heatmapWaterVis, {}, 'heatmap (water)', true);

var heatmapColors = ['000000', '00ff00', 'aaffaa']
var heatmapLandVis = heatmapLand.mask(heatmapLand.divide(maxArea))
  .visualize({min:0, max:maxArea, opacity: 0.4, palette: heatmapColors})

Map.addLayer(heatmapLandVis, {}, 'heatmap (land)', true);



var image = ee.ImageCollection.fromImages([
  naturalEarthDesaturated.visualize({gamma:0.3}).rename(['r','g','b']),
  bg.visualize({opacity:0.6}).rename(['r','g','b']),
  bgBasinsMask.mask(bgBasinsMask).visualize({opacity :0.5, forceRgbOutput: true}).rename(['r','g','b']),
  heatmapLandVis.rename(['r','g','b']),
  heatmapWaterVis.rename(['r','g','b']),
  waterVis.rename(['r','g','b']),
  landVis.rename(['r','g','b']),
  ]).mosaic().visualize({forceRgbOutput:true})

var name = 'change'
Export.image(image, name, {dimensions: 1920, /*scale: 10000,*/ crs: 'EPSG:4326', region: JSON.stringify(rect.getInfo()), driveFileNamePrefix: name})

Map.addLayer(image, {}, 'change (export)', false);


// top changes


/*
var minArea = 300000
var largeWater = heatmapWater.gt(minArea)
  .focal_max(100000, 'circle', 'meters')
  .focal_min(100000, 'circle', 'meters')

var largeLand = heatmapLand.gt(minArea)
  .focal_max(100000, 'circle', 'meters')
  .focal_min(100000, 'circle', 'meters')
Map.addLayer(largeLand.mask(largeLand), {min: minArea, max: minArea, palette:['20ff20']}, 'land (heatmap)')
Map.addLayer(largeWater.mask(largeWater), {min: minArea, max: minArea, palette:['00d8ff']}, 'water (heatmap)')
*/

/*
var minArea = 300
var largeWater = water300m.gt(minArea)
  .focal_max(20000, 'circle', 'meters')
  .focal_min(20000, 'circle', 'meters')

var largeLand = land300m.gt(minArea)
  .focal_max(20000, 'circle', 'meters')
  .focal_min(20000, 'circle', 'meters')

Map.addLayer(largeLand.mask(largeLand), {min: minArea, max: minArea, palette:['20ff20']}, 'land (heatmap)')
Map.addLayer(largeWater.mask(largeWater), {min: minArea, max: minArea, palette:['00d8ff']}, 'water (heatmap)')
*/

/*
var xmin = -180, xmax = 180, ymin = -60, ymax = 85, dx = 40, dy = 40;
var rect = ee.Geometry.Rectangle([xmin, ymin, xmax, ymax], 'EPSG:4326', false)

var largeWaterVector = largeWater.reduceToVectors({scale:100000, geometry: rect})
Map.addLayer(largeWaterVector)
*/


function renderLandsatPercentile(options) {
  var percentile = options.percentile;
  var start = options.start;
  var stop = options.stop;
  var sharpen = options.sharpen;
  var smoothen = options.smoothen;
  var filterCount = options.filterCount;
  
  var bands = ['swir1', 'nir', 'green'];
  var l8 = new ee.ImageCollection('LANDSAT/LC8_L1T_TOA').filterDate(start, stop).select(['B6', 'B5', 'B3'], bands);
  var l7 = new ee.ImageCollection('LANDSAT/LE7_L1T_TOA').filterDate(start, stop).select(['B5', 'B4', 'B2'], bands);
  var l5 = new ee.ImageCollection('LANDSAT/LT5_L1T_TOA').filterDate(start, stop).select(['B5', 'B4', 'B2'], bands);
  var l4 = new ee.ImageCollection('LANDSAT/LT4_L1T_TOA').filterDate(start, stop).select(['B5', 'B4', 'B2'], bands);
  var images = ee.ImageCollection(l8.merge(l7).merge(l5).merge(l4))
  
  images = images.filterMetadata('SUN_ELEVATION', 'greater_than', 45)
  
  if(smoothen) {
    images = images.map(function(i) { return i.resample('bicubic'); })
  }

  var image = images.reduce(ee.Reducer.percentile([percentile])).rename(bands)

  if(filterCount > 0) {
    image = image.mask(images.select(0).count().gt(filterCount));
  }

  Map.addLayer(images.select(0).count(), {min:filterCount, max:200, palette:['d7191c','fdae61','ffffbf','a6d96a','1a9641']}, 'count', false)

  if(sharpen) {
    image = image.subtract(image.convolve(ee.Kernel.gaussian(30, 20, 'meters')).convolve(ee.Kernel.laplacian8(0.4)))
  }

  return image.visualize({min: 0.05, max: [0.5, 0.5, 0.6], gamma: 1.4})
}

function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

/***
 * Generates a regular grid using given bounds.
 */
var generateGrid = function(xmin, ymin, xmax, ymax, dx, dy) {
  var xx = ee.List.sequence(xmin, ee.Number(xmax).subtract(dx), dx)
  var yy = ee.List.sequence(ymin, ee.Number(ymax).subtract(dy), dy)
  
  var cells = xx.map(function(x) {
    return yy.map(function(y) {
      var x1 = ee.Number(x)
      var x2 = ee.Number(x).add(ee.Number(dx))
      var y1 = ee.Number(y)
      var y2 = ee.Number(y).add(ee.Number(dy))
      
      var coords = ee.List([x1, y1, x2, y2]);
      var rect = ee.Algorithms.GeometryConstructors.Rectangle(coords);
      return ee.Feature(rect)
    })
  }).flatten();

  return ee.FeatureCollection(cells);
}

function aggregate(scale, from, to, mask) {
    from = ee.Number(from)
    to = ee.Number(to)
    var maxPixels = to.divide(from).pow(2)
  
    // add aggregated version of change
    var changeAggregatedWater = scale.gt(0).multiply(ee.Image.pixelArea()).multiply(mask)
      .reproject('EPSG:4326', null, from)
      .reduceResolution(ee.Reducer.sum(), false, maxPixels)
      .reproject('EPSG:4326', null, to)
      .multiply(to.divide(from))

    var changeAggregatedLand = scale.lt(0).multiply(ee.Image.pixelArea()).multiply(-1).multiply(mask)
      .reproject('EPSG:4326', null, from)
      .reduceResolution(ee.Reducer.sum(), false, maxPixels)
      .reproject('EPSG:4326', null, to)
      .multiply(to.divide(from))

    return {water: changeAggregatedWater, land: changeAggregatedLand};
}

function showAggregated(aggregated, maxScale) {
    var waterVis = aggregated.water
      .visualize({min: 0, max: maxArea, palette: ['000000', '00d8ff']})

    var landVis = aggregated.land
      .visualize({min: -maxArea, max: 0, palette: ['00ff00', '000000']})

    Map.addLayer(aggregated.water, {}, 'scale aggregated water (raw)', false)
    Map.addLayer(aggregated.land, {}, 'scale aggregated land (raw)', false)
    
    Map.addLayer(waterVis.mask(aggregated.water.divide(maxArea)), 
      {}, 'change aggregated (land => water)', false)

    Map.addLayer(landVis.mask(aggregated.land.divide(-maxArea)), 
      {}, 'change aggregated (water => land)', false)
}

var from = 30
var to = 300

var trend1Aggregated = aggregate(scale, from, to, 
  swbdMask.multiply(noiseMask.not()).multiply(handMask100)
  //ee.Image(1)
  );

trend1Aggregated = {
    water: trend1Aggregated.water.multiply(100), 
    land: trend1Aggregated.land.multiply(100)
};

showAggregated(trend1Aggregated, 20000)

//land = trend1Aggregated.land.visualize({min: -20000, max: 0, palette: ['00ff00', '000000']})
//water = trend1Aggregated.water.visualize({min: 0, max: 20000, palette: ['000000', '00d8ff']})


// 300m => 3000m
var maxArea3km = 5000

var water3km = water300m.unmask()
  .reproject('EPSG:4326', null, 300)
  .reduceResolution(ee.Reducer.sum(), false, 10000)
  .reproject('EPSG:4326', null, 5000)
  .multiply(100)

Map.addLayer(water3km.unmask(), {min: 0, max: maxArea3km, palette: ['000000', '00d8ff']}, 'water 3km', false)

var land3km = land300m.unmask()
  .reproject('EPSG:4326', null, 300)
  .reduceResolution(ee.Reducer.sum(), false, 10000)
  .reproject('EPSG:4326', null, 5000)
  .multiply(100)

Map.addLayer(land3km.unmask(), {min: 0, max: maxArea3km, palette: ['000000', '00ff00']}, 'land 3km', false)


// compute stats

//return

print("Exporting aggregated results as a feature collection ...")

var xmin = -180, xmax = 180, ymin = -55, ymax = 85, dx = 1, dy = 1;
var grid = generateGrid(xmin, ymin, xmax, ymax, dx, dy);

var mask = swbdMask.multiply(noiseMask.not())

Map.addLayer(mask.mask(mask), {}, 'vector export (mask)', false)

var results = ee.FeatureCollection(grid.map(function(cell) {
  var totalWater = water300m.mask(mask)
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: cell.geometry(), scale: 300, maxPixels: 1e12}).get('b1')
  
  var totalLand = land300m.mask(mask)
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: cell.geometry(), scale: 300, maxPixels: 1e12}).get('b1')

  return cell.set('total_water', totalWater).set('total_land', totalLand)
}))

Map.addLayer(results, {}, 'results vector', false)

Export.table(results, 'aggregated_water_land_change_1985_2013', {fileFormat:'GeoJSON'})


// aggregate by catchments
var basinsLevel5 = ee.FeatureCollection('ft:1IHRHUiWkgPXOzwNweeM89CzPYSfokjLlz7_0OTQl')

var results = ee.FeatureCollection(basinsLevel5.map(function(f) {

  var totalWater = water300m.mask(mask)
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')
  
  var totalLand = land300m.mask(mask)
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')

  return f.set('total_water', totalWater).set('total_land', totalLand)
}))

Map.addLayer(results, {}, 'results vector (Basins)', false)

Export.table(results, 'aggregated_per_basin_1985_2013_level5', {fileFormat:'GeoJSON'})

// aggregate by countries + coastlines

// coastline
if(extendToCoastline) {
  countries = countries.map(function(f) { 
    var buffer = f.buffer(50000, bufferError)
    
    var nearest = countries.filterBounds(buffer.geometry()).geometry()
    
    var coastPart = buffer.geometry().difference(nearest)
    
    return f.union(coastPart)
  })

  Map.addLayer(countries, {}, 'Countries (+coast)', false)
}


// results, per country, no coastline
var results = ee.FeatureCollection(countries.map(function(f) {
  var totalWater = water300m
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')

  var totalLand = land300m
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')

  return f.set('total_water', totalWater).set('total_land', totalLand)
    .set('area', f.geometry().area())
}))

Map.addLayer(results, {}, 'results vector (Countries)', false)
Export.table(results, 'aggregated_per_countries_1985_2013', {fileFormat:'GeoJSON'})


// results, per country, no coastline
var results = ee.FeatureCollection(countries.map(function(f) {
  var totalWater = water300m.mask(mask.multiply(coastline))
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')
  
  var totalLand = land300m.mask(mask.multiply(coastline))
    .reduceRegion({reducer: ee.Reducer.sum(), geometry: f.geometry(), scale: 300, maxPixels: 1e12}).get('b1')

  return f.set('total_water', totalWater).set('total_land', totalLand)
    .set('area', f.geometry().area())
}))

Map.addLayer(results, {}, 'results vector (Countries, coastline)', false)
Export.table(results, 'aggregated_per_countries_1985_2013_coastline', {fileFormat:'GeoJSON'})

return


print("Exporting aggregated (upscale/sum) raster results ...")

// generate global grid
var xmin = -180, xmax = 180, ymin = -75, ymax = 85, dx = 90, dy = 80
//var xmin = -180, xmax = 180, ymin = -75, ymax = 85, dx = 40, dy = 40;
//var xmin = -180, xmax = 180, ymin = -80, ymax = 85, dx = 15, dy = 15;
var grid = generateGrid(xmin, ymin, xmax, ymax, dx, dy);

//var grid = ee.FeatureCollection('ft:1CH6u9UdsYgU6qsEtbsHxvYBf8ucnflmtbRVeTrU_'); // 4 degrees
//var grid = ee.FeatureCollection('ft:1cmASWugzqQBLH93vRf9t7Zvfpx_RvtmVhy8IGd6H') // 3 degrees
print('Total cell count: ', grid.size())

Map.addLayer(grid, {}, 'grid', false)

//var type = 'water'
var type = 'land'

var offset = 0
var maxIndex = 8

var count = maxIndex - offset
grid = grid.toList(count, offset);
var l8 = new ee.ImageCollection('LANDSAT/LC8_L1T_TOA').filterDate('2014-01-01', '2015-01-01');

for(var i = offset; i < maxIndex; i++) {
  var f = ee.Feature(grid.get(i - offset))
  var geometry = f.geometry()
  
  if(type == 'water') {
    var name = 'water_' + to.toString() + '_' + pad(i, 4);
    var image = trend1Aggregated.water;
    var s = to
  } else if(type == 'land') {
    var name = 'land_' + to.toString() + '_' + pad(i, 4);
    var image = trend1Aggregated.land;
    var s = to
  } else if(type == 'scale') {
    var name = 'scale_' + pad(i, 4);
    var image = trend1.change;
    var s = 30
  }

  var any = l8.filterBounds(f.geometry()).toList(1).size().getInfo()

  if(any) {
    Export.image(image, name, {
      scale: s,
      region: JSON.stringify(geometry.getInfo()),
      driveFileNamePrefix: name,
      maxPixels: 1e12
    })
    
    //Map.addLayer(geometry, {}, 'cell ' + i)
    //Map.centerObject(geometry)
  }    
}

