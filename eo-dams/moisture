/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var alos = ee.Image("JAXA/ALOS/AW3D30_V1_1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var palettes = require('users/gena/packages:palettes')

Map.addLayer(ee.Image(0))

var s2 = ee.ImageCollection('COPERNICUS/S2')

function showMoisture(image) {
  s2 = s2.filterDate(image.date().advance(-1, 'second'), image.date().advance(1, 'second')).first().resample('bicubic')
   
  var s = Map.getScale()
  var r = s * 4
  var σ = s * 2
  // s2 = s2.subtract(s2.convolve(ee.Kernel.gaussian(r, σ, 'meters')).convolve(ee.Kernel.laplacian8(3))) // LoG
  
  
  Map.addLayer(s2, { min: 400, max: 2500, bands: ['B11', 'B8A', 'B4']})
  
  var m = s2.select('B11').divide(s2.select('B8A'))
  Map.addLayer(m.mask(m.unitScale(0.6, 1.5)), {
    min: 0.6, max: 1.5, palette: palettes.cb.YlOrBr[9].reverse().slice(2)
  })
} 

/*
Copyright (c) 2018 Gennadii Donchyts. All rights reserved.

This work is licensed under the terms of the MIT license.  
For a copy, see <https://opensource.org/licenses/MIT>.
*/

var animation = require('users/gena/packages:animation')
var assets = require('users/gena/packages:assets')

var bounds = ee.Geometry(Map.getBounds(true))

// get images from one or multiple missions
var images = assets.getImages(bounds.centroid(1), {
  //filter: ee.Filter.date("1985-01-01", "1995-01-01"),
  //filter: ee.Filter.date("2018-07-22", "2020-01-01"),
  //filter: ee.Filter.date("2000-01-01", "2020-01-01"),
  //filter: ee.Filter.date("2018-01-01", "2020-01-01"),
  filter: ee.Filter.date("2018-10-01", "2020-01-01"),
  resample: true,
  //filterMasked: true,
  missions: [
    'S2', 
    //'L8', 
    //'L7', 
    //'L5',
    //'L4'
  ]
})


// images = images.map(function(i) { 
//   return i.visualize({bands:['swir','nir','red'], gamma: 2, min: 0.07})
//     .set({ label: i.date().format('YYYY-MM-dd') })
// })
//animation.animate(images, {label: 'label', maxFrames: 300})  

if(1) {
  // filter out noisy images
  images = assets.getMostlyCleanImages(images, bounds, {
      scale: Map.getScale() * 10, 
      
      // how much should we deviate from cloud frequency when filtering images, use negative value to allow more (cloudy) images
      //cloudFrequencyThresholdDelta: 0.15,
      cloudFrequencyThresholdDelta: -0.05,
  
      // percentile and band used for cloudness, usually enough to choose one like green    
      scorePercentile: 95,
      qualityBand: 'green',
    })
  
  print('Count: ', images.size())
  
  // images = images.filterDate('2018-12-31', '2020-01-01')
}

print('Count: ', images.size())

// images = ee.FeatureCollection(images).randomColumn('random').filter(ee.Filter.gt('random', 0.9))
// images = ee.ImageCollection(images)

// print('Count (random filtered): ', images.size())

images = images
  .sort('system:time_start')
  //.sort('quality')


var imagesRGB = images
  .map(function(i) {
    var image = i
    //var image = images.filterDate(i.date(), i.date().advance(-1, 'month')).mosaic()
    
    var s = Map.getScale()
    var r = s * 4
    var σ = s * 2
    // image = image.subtract(image.convolve(ee.Kernel.gaussian(r, σ, 'meters')).convolve(ee.Kernel.laplacian8(3))) // LoG

    // false-color index
    var ndwi = image.normalizedDifference(['green', 'nir']).unitScale(-0.5, 0.5)
    // var mndwi = image.normalizedDifference(['green', 'swir']).unitScale(-0.1, 0.4)
    // var ndvi = image.normalizedDifference(['red', 'nir']).unitScale(-0.1, 0.15)
    
    // return ee.Image([ndvi, ndvi, mndwi]).visualize({})
  
    //return image.visualize({bands:['red','green','blue'], gamma: 1.8, min:0.05, max:[0.5, 0.5, 0.55]})
    //return image.normalizedDifference(['green', 'nir']).visualize({palette:palettes.Blues[9], min: -0.1, max: 0.3})    
    // return image.visualize({bands:['swir','nir','red'], gamma: 1.4, min: 0.07, max: 0.6})

    // band fiddling
    image = image.subtract(image.convolve(ee.Kernel.gaussian(Map.getScale()*2, Map.getScale(), 'meters')).convolve(ee.Kernel.laplacian8(1))) // LoG

    image = image.select(['red', 'green', 'blue']).add(ee.Image([
      ee.Image(0).float(), 
      image.select('nir'), 
      ee.Image(0).float(), 
      // ndwi.multiply(0.15)
    ]))
    image = image.visualize({bands:['red','green','blue'], min: [0.06, 0.11, 0.11], max: [0.4, 1.0, 0.4], gamma: 1.9 })
      
    return image
      .set({ label: i.date().format('YYYY-MM-dd').cat(' ').cat(i.get('MISSION')) })
  })

// animate
animation.animate(imagesRGB, {label: 'label', maxFrames: 100})
  .then(function() {
    Map.addLayer(ee.Terrain.hillshade(alos, 0, 25).resample('bicubic'), {}, 'DEM')

    showMoisture(images.sort('system:time_start', false).first())
  })

