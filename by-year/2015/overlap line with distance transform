/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var g2 = /* color: d63000 */ee.Geometry.MultiPolygon(
        [[[[-120.34423828125, 39.24927084622338],
           [-120.03662109375, 38.685509760012],
           [-119.59716796875, 38.839707613545144],
           [-119.8828125, 39.38526381099777]]],
         [[[-119.3115234375, 39.36827914916013],
           [-119.53125, 38.87392853923629],
           [-119.11376953125, 38.70265930723801],
           [-118.828125, 39.2832938689385]]]]),
    g1 = /* color: 98ff00 */ee.Geometry.Polygon(
        [[[-120.0750732421875, 39.45316112807393],
          [-120.0531005859375, 38.95086540091999],
          [-119.278564453125, 38.95940879245423],
          [-119.2620849609375, 39.49132430037711]]]),
    l = /* color: d63000 */ee.Geometry.LineString(
        [[-121.6131591796875, 39.21948715423953],
         [-117.344970703125, 39.0533181067413]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// overlap line with distance transform
var img = ee.Image().byte().paint(g1, 0).paint(g2, 1)

Map.addLayer(img, {min:0, max:1});

var distance = img.distance(ee.Kernel.euclidean(50, "pixels"))
Map.addLayer(distance, {min:0, max:50});

// compute intersection

print('count:', distance.reduceRegion({ 
  reducer: ee.Reducer.count(),  geometry: l, crs: 'EPSG:3857', scale: 1000
}).get('constant'));

print('count every:', distance.reduceRegion({ 
  reducer: ee.Reducer.countEvery(),  geometry: l, crs: 'EPSG:3857', scale: 1000
}).get('constant'));

var h = distance.reduceRegion({ 
  reducer: ee.Reducer.histogram(10),  geometry: l, 
  crs: 'EPSG:3857', scale: 1000 
});

print(Chart(getDataTable(h.get('constant').getInfo()), 'Table'));

function getDataTable(histDict) {
  var rows = histDict.histogram.map(function(v, i) {
    var min = histDict.bucketMin + histDict.bucketWidth * i;
    return {c: [{v: min}, {v: v}]}
  });
  var cols = [
      {id: 'bucketMin', label: 'Bucket Min', type: 'number'},
      {id: 'count', label: 'Count', type: 'number'}
  ];
  return {cols: cols, rows: rows};
}
