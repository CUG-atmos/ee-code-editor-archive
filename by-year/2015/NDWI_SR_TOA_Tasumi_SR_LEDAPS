//Tasumi At-surface Reflectance

// United States polygon
var us_fc = ee.FeatureCollection('ft:1fRY18cjsHzDgGiJiS2nnpUU3v9JPDc2HNaR7Xk8')
  .filter(ee.Filter.or(
    ee.Filter.eq('Name', 'Nevada'),
    ee.Filter.eq('Name', 'California')));

// Landsat collection
var refl_toa_coll = ee.ImageCollection('L5_L1T_TOA')
  .filterDate("1993-07-01", "1993-08-31")
  .filterBounds(us_fc);

// NLDAS hourly collection
var nldas_coll = ee.ImageCollection('FORA0125_H002');

// For each landsat scene, get nearest NLDAS hourly image before and after scene time
var nldas_filter = ee.Filter.maxDifference(
    1000*60*60*4, "system:time_start", null, "system:time_start", null);
var nldas_prev_filter = nldas_filter.and(
    ee.Filter.greaterThan("system:time_start", null, "system:time_start", null));
var nldas_next_filter = nldas_filter.and(
    ee.Filter.lessThan("system:time_start", null, "system:time_start", null));
var refl_toa_coll = ee.ImageCollection(ee.Join.saveBest('nldas_prev_match', 'nldas_prev_metric')
  .apply(refl_toa_coll, nldas_coll, nldas_prev_filter));
var refl_toa_coll = ee.ImageCollection(ee.Join.saveBest('nldas_next_match', 'nldas_next_metric')
  .apply(refl_toa_coll, nldas_coll, nldas_next_filter));

// Constants
var pi=Math.PI;

// Fixed ancillary rasters
var elev = ee.Image("USGS/NED");
var nlcd = ee.Image("NLCD2006").select(['landcover']);
var lat = ee.Image.pixelLonLat().select(['latitude']).multiply(pi/180);
var lon = ee.Image.pixelLonLat().select(['longitude']).multiply(pi/180);
var terrain = ee.call('Terrain', elev);
var slope = terrain.select(["slope"]).multiply(pi/180);
var aspect = terrain.select(["aspect"]).multiply(pi/180).subtract(pi);

// Precalculate since it doesn't change based on landsat scene
var pair = elev.expression('101.3 * pow((293 - 0.0065 * b()) / 293, 5.26)');

// Tasumi At-Surface Reflectance
var tasumi_reflectance = function (refl_toa_image) {
  var scene_time = ee.Number(refl_toa_image.get("system:time_start"));
  var scene_date = ee.Algorithms.Date(refl_toa_image.get("system:time_start"));
  var doy = ee.Number(scene_date.getRelative('day', 'year')).add(1).double();
  var hour = ee.Number(scene_date.getFraction('day')).multiply(24);

  // Interpolate NLDAS image at Landsat scene time
  function nldas_interp_func (refl_toa) {
    //var scene_time = ee.Number(refl_toa.get("system:time_start"));
    var nldas_prev_image = ee.Image(refl_toa.get("nldas_prev_match"));
    var nldas_next_image = ee.Image(refl_toa.get("nldas_next_match"));
    var nldas_prev_time = ee.Number(nldas_prev_image.get("system:time_start"));
    var nldas_next_time = ee.Number(nldas_next_image.get("system:time_start"));
    // Calculate time ratio of Landsat image between NLDAS images
    var time_ratio_image = ee.Image.constant(scene_time.subtract(nldas_prev_time)
      .divide(nldas_next_time.subtract(nldas_prev_time)));
    // Interpolate NLDAS values at Landsat image time
    return nldas_next_image.subtract(nldas_prev_image)
      .multiply(time_ratio_image).add(nldas_prev_image)
      .set({"system:time_start": scene_time, "system:time_end": scene_time}); }
  var nldas_image = nldas_interp_func(refl_toa_image);

  // Calculate vapor pressure from specific humidity
  var q = nldas_image.select(["specific_humidity"]);  // kg/kg
  var ea = pair.multiply(q).divide(q.multiply(0.378).add(0.622));

  // Cos(theta)
  function cos_theta_simple_func(acq_doy, acq_time, lat, lon) {
    var delta = acq_doy.multiply(2*pi/365).subtract(1.39435).sin().multiply(0.40928);
    var b = acq_doy.subtract(81).multiply(2*pi/364);
    var sc = b.multiply(2).sin().multiply(0.1645)
      .subtract(b.cos().multiply(0.1255))
      .subtract(b.sin().multiply(0.025));
    var solar_time = lon.expression(
      't + (lon * 12 / pi) + sc',
      {'pi':pi, 't':ee.Image.constant(acq_time), 
       'lon':lon, 'sc':ee.Image.constant(sc)});
    var omega = solar_time.subtract(12).multiply(pi / 12);
    var cos_theta = lat.expression(
      'sin(delta) * sin(lat) + cos(delta) * cos(lat) * cos(omega)',
      {'delta':ee.Image.constant(delta), 'lat':lat, 'omega':omega});
    return cos_theta;}
  //var cos_theta = cos_theta_simple_func(doy, hour, lat, lon)
  //  .select([0], ['cos_theta']);

  function cos_theta_mountain_func(acq_doy, acq_time, lat, lon, slope, aspect) {
    var delta = doy.multiply(2 * pi / 365).subtract(1.39435).sin().multiply(0.40928);
    var b = doy.subtract(81).multiply(2 * pi / 364);
    var sc = b.multiply(2).sin().multiply(0.1645)
      .subtract(b.cos().multiply(0.1255))
      .subtract(b.sin().multiply(0.025));
    var solar_time = lon.expression(
      't + (lon * 12 / pi) + sc',
      {'pi':pi, 't':ee.Image.constant(acq_time), 
       'lon':lon, 'sc':ee.Image.constant(sc)});
    var omega = solar_time.subtract(12).multiply(pi / 12);
    var slope_c = slope.cos();
    var slope_s = slope.sin();
    var cos_theta = lat.expression(
        ('(sin(lat) * slope_c * delta_s) - ' +
         '(cos(lat) * slope_s * cos(aspect) * delta_s) + ' +
         '(cos(lat) * slope_c * cos(omega) * delta_c) + ' +
         '(sin(lat) * slope_s * cos(aspect) * cos(omega) * delta_c) + ' +
         '(sin(aspect) * slope_s * sin(omega) * delta_c)'),
        {'lat':lat, 'aspect':aspect, 
         'slope_c':slope_c, 'slope_s':slope_s, 'omega':omega,
         'delta_c':ee.Image.constant(delta.cos()), 
         'delta_s':ee.Image.constant(delta.sin())});
    cos_theta = cos_theta.divide(slope_c).max(ee.Image.constant(0.1));
    return cos_theta; }
  var cos_theta = cos_theta_mountain_func(doy, hour, lat, lon, slope, aspect)
    .select([0], ['cos_theta']);

  // At-surface reflectance
  function refl_sur_func(refl_toa, pair, ea, cos_theta) {
    // Precipitable water
    var w = pair.multiply(0.14).multiply(ea).add(2.1);
    var c1 = ee.Image([0.987, 2.319, 0.951, 0.375, 0.234, 0.365]);
    var c2 = ee.Image([-0.00071, -0.000164, -0.000329, -0.000479, -0.001012, -0.000966]);
    var c3 = ee.Image([0.000036, 0.000105, 0.00028, 0.005018, 0.004336, 0.004296]);
    var c4 = ee.Image([0.088, 0.0437, 0.0875, 0.1355, 0.056, 0.0155]);
    var c5 = ee.Image([0.0789, -1.2697, 0.1014, 0.6621, 0.7757, 0.639]);
    var cb = ee.Image([0.640, 0.31, 0.286, 0.189, 0.274, -0.186]);
    var tau_in = pair.multiply(c2).divide(cos_theta)
      .subtract(w.multiply(c3).add(c4).divide(cos_theta)).exp().multiply(c1).add(c5);
    var tau_out = pair.multiply(c2).subtract(w.multiply(c3).add(c4))
      .exp().multiply(c1).add(c5);  
    return refl_toa
      .select(["10", "20", "30", "40", "50", "70"])
      .expression(
        '(b() + cb * (tau_in - 1)) / (tau_in * tau_out)',
        {'cb':cb, 'tau_in':tau_in, 'tau_out':tau_out})
      .clamp(0.0001,1);
  }
  var refl_sur_image = refl_sur_func(refl_toa_image, pair, ea, cos_theta);
  return refl_sur_image;
};

// Calculate at-surface reflectance for a collection
var refl_sur_coll = refl_toa_coll.map(tasumi_reflectance);
addToMap(refl_sur_coll.median().select('30', '20', '10'), {min:"0, 0, 0", max:"0.4, 0.4, 0.4"}, "SR (Tasumi et al.)");
//centerMap(-118, 38, 6);

var refl_ledaps_coll = ee.ImageCollection('L5_L1T_SR')
  .filterDate("1993-07-01", "1993-08-31")
  .filterBounds(us_fc);
addToMap(
  refl_ledaps_coll.median().select('B3','B2','B1').divide(10000),
  {min:"0, 0, 0", max:"0.4, 0.4, 0.4"}, 
  "SR (LEDAPS) scaled");

// Display the difference between LEDAPS and Tasumi SR.
var refl_diff_coll = refl_sur_coll.median().select('30')
                     .subtract(refl_ledaps_coll.median().select('B3').divide(10000));
addToMap(refl_diff_coll, 
         {min:"-0.05", max:"0.05", palette:"FF0000,FFFFFF,0000FF"},
         "SR (Tasumi) - SR (LEDAPS) band 3"
        );

addToMap(refl_toa_coll.median().select('30', '20', '10'), {min:"0, 0, 0", max:"0.4, 0.4, 0.4"}, "TOA", false);

// compute NDWI_TOA
var refl_toa_median = refl_toa_coll.median();
var ndwi_toa = refl_toa_median.expression('(green - nir) / (green + nir) > 0',
      { green: refl_toa_median.select('20'), nir: refl_toa_median.select('40') });

addToMap(ndwi_toa, {palette:"FFFFFF,00FFFF"}, "NDWI (TOA)", false);

// compute NDWI_SR
var refl_sur_median = refl_sur_coll.median();
var ndwi_sr = refl_sur_median.expression('(green - nir) / (green + nir) > 0',
      { green: refl_sur_median.select('20'), nir: refl_sur_median.select('40') });

addToMap(ndwi_sr, {palette:"FFFFFF,0000FF"}, "NDWI (SR)", false);

// compute NDWI_SR - NDWI_TOA
var ndwi_sr_toa_diff = ndwi_toa.subtract(ndwi_sr);
addToMap(ndwi_sr_toa_diff, {palette:"FFFFFF,100000"}, "NDWI (TOA) - NDWI (SR)", true);
