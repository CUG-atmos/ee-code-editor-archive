// OSM, intersect vector with raster

var azimuth = 90;
var zenith = 60;

function radians(img) { return img.toFloat().multiply(3.1415927).divide(180); }

// DEM Hillshade function - Compute hillshade for the given illumination az, el.
function hillshade(az, ze, slope, aspect) {
  var azimuth = radians(ee.Image(az));
  var zenith = radians(ee.Image(ze));
  return azimuth.subtract(aspect).cos().multiply(slope.sin()).multiply(zenith.sin())
      .add(zenith.cos().multiply(slope.cos()));
}

function hillshadeit(image, elevation, weight, height_multiplier) {
  var hsv  = image.unitScale(0, 255).rgbtohsv();

  var terrain = ee.call('Terrain', elevation.multiply(height_multiplier));
  var slope = radians(terrain.select(['slope']));
  var aspect = radians(terrain.select(['aspect']));
  var hs = hillshade(azimuth, zenith, slope, aspect);

  var intensity = hs.multiply(weight).multiply(hsv.select('value'));
  var huesat = hsv.select('hue', 'saturation');
  
  return ee.Image.cat(huesat, intensity).hsvtorgb();
}

var features = ee.FeatureCollection('ft:1rrk-yEOb8ILSolV_kSVD1qGxszHcy0cSL9UnUxIh');
var aoi = features.filter(ee.Filter.eq('HYBAS_ID', 5050597410));
Map.addLayer(ee.Image(0).mask(0).paint(aoi, 'fill').paint(aoi, 1, 2), {palette: 'ffffff'}, 'fill')

Map.centerObject(aoi, 10)
print(Map.getScale())


var rivers_lines_osm = ee.FeatureCollection('ft:1nlWWjT4VkGjkp-kXKroFuyUuKDUSTqce_DDtmOt1')
  .filter(ee.Filter.inList('waterway', ['river', 'stream', 'drain', 'canal', 'drain', 'creek', 'ditch']))
  .filterBounds(aoi);


var rivers_polygons_osm = ee.FeatureCollection('ft:1gUbHjPLpeC4Vzi59vE5JSFfLRDtcrngyWfSn8mQC');

// split lines into short segments
var f = ee.Feature(rivers_lines_osm.first());
var g =  f.geometry();
var coords = g.coordinates()

/*
var segmentLength = ee.Number(50.0);
var length = g.length();
var segmentEnd = 0;
var segmentStart = 0;
for(var l = 0; l < length; l+=segmentLength) {
  
  
              var lengthIndexedLine = new LengthIndexedLine(branch.Geometry);

            var geometryStartChainage = startChainage;
            var geometryEndChainage = endChainage;
            IGeometry geometry = null;
            if (branch.Geometry != null)
            {
                if (branch.IsLengthCustom)
                {
                    geometryStartChainage = startChainage * (branch.Geometry.Length / branch.Length);
                    geometryEndChainage = endChainage * (branch.Geometry.Length / branch.Length);
                }

                geometry = (IGeometry)lengthIndexedLine.ExtractLine(geometryStartChainage, geometryEndChainage).Clone();
            }

            var segment = new NetworkSegment
            {
                Geometry = geometry,
                Branch = branch,
                Chainage = startChainage,
                Length = endChainage - startChainage
            };

            return segment;

}

print(segmentCount)
print(coordinates)
print(length)
print(f)
*/

/*var segments = rivers_lines_osm.map(function(f) {
  
  return 
}).merge();
*/

/* 
// draw lines using different colors
var osm_id_min = rivers_lines_osm.aggregate_min('osm_id').getInfo();
var osm_id_max = rivers_lines_osm.aggregate_max('osm_id').getInfo();
print(osm_id_min)
print(osm_id_max)
var colors = ['a6cee3', '1f78b4', 'b2df8a', '33a02c', 'fb9a99', 'e31a1c', 'fdbf6f', 'ff7f00', 'cab2d6', '6a3d9a', 'ffff99', 'b15928']
Map.addLayer(rivers_lines_osm.reduceToImage(['osm_id'], ee.Reducer.max()), {min:osm_id_min, max:osm_id_max, palette: colors}, 'rivers_lines (raster_random)')
*/

var hand = new ee.Image('GME/images/05889347502198831302-12745745341423157006');

var colors_hand = ['023858', '006837', '1a9850', '66bd63', 'a6d96a', 'd9ef8b', 'ffffbf', 'fee08b', 'fdae61', 'f46d43', 'd73027'];
Map.addLayer(hillshadeit(hand.visualize({min:0, max:300, palette:colors_hand}), hand, 2.0, 2), {}, 'hand', false)

Map.addLayer(ee.Image(0).mask(0).toByte().paint(rivers_lines_osm, 0, 2.0), {palette:'2020ff'}, 'rivers_lines', true);

Map.addLayer(ee.Image(0).mask(0).toByte()
                .paint(rivers_polygons_osm, 'fill')
                .paint(rivers_polygons_osm, 1, 1), 
{palette: '2020ff,0000c6,0000c6,0000c6', 'opacity': 0.5}, 'rivers_polygons');


var hand_max = 20;

// select mask
var handMask = hand.gt(hand_max).clip(aoi);
Map.addLayer(handMask.mask(handMask), {palette:['505050'], opacity:0.9}, 'hand > ' + hand_max)

var info = handMask.getInfo().bands[0];

print(rivers_lines_osm.aggregate_count('.all'))

var scale = hand.projection().nominalScale()

// split river lines into 1000m segments
// ... TODO

// ============= 1. find potentially 'bad' OSM rivers using num_pixels > threshold

// Three input bands: hand, hand, and elevation (SRTM).
var bands = hand.addBands(hand).addBands(ee.Image('srtm90_v4'));
// Mask them all based on hand.
bands = bands.mask(handMask);

// Corresponding reducers: count, max, and mean
var reducer = ee.Reducer.count().setOutputs(['num_pixels'])
  .combine(ee.Reducer.max().setOutputs(['max_hand']))
  .combine(ee.Reducer.mean().unweighted().setOutputs(['mean_elevation']));

var augmented_rivers_lines_osm = bands.reduceRegions(rivers_lines_osm, reducer).filter(ee.Filter.gt('num_pixels', 10));
// print(augmented_rivers_lines_osm.limit(2));

var image = ee.Image(0).mask(0).paint(augmented_rivers_lines_osm, 0, 2.5);
Map.addLayer(image, {palette:'ff4040', opacity: 0.5}, 'rivers_lines (num pixels > 10)', true);

// ============ 2. find potentially 'bad' OSM rivers using ratio sum_intersected_hand_values / length
var intersected_rivers_lines_osm = hand.reduceRegions(rivers_lines_osm, ee.Reducer.sum(), scale);

intersected_rivers_lines_osm = intersected_rivers_lines_osm.map(function(f) { 
  var length = f.geometry().length(1e-3);
  var score = ee.Number(f.get('sum')).divide(length);

  f = f.set('score', score);
  f = f.set('length', length);

  return f;
});

print('score_max: ', intersected_rivers_lines_osm.aggregate_max('score'))
print('score_min: ', intersected_rivers_lines_osm.aggregate_min('score'))

var image = ee.Image(0).mask(0).paint(intersected_rivers_lines_osm.filter(ee.Filter.gt('score', 0.15)), 1, 2.5);
Map.addLayer(image, {palette: ['ff4040']}, 'score > 0.15')

// print(intersected_rivers_lines_osm.reduceColumns(ee.Reducer.toList().repeat(5), ['osm_id', 'sum', 'count', 'length', 'score']).get('list'));


//print(intersected_rivers_lines_osm.aggregate_count('.all'))
//print(intersected_rivers_lines_osm.limit(800));


// var prj = hand.projection().getInfo();
// var handPolygons = handMask.reduceToVectors({eightConnected: true, crs: prj.crs, crsTransform: prj.transform, maxPixels: 50000000});
//Map.addLayer(handPolygons);

Map.addLayer(ee.Image(0).mask(0).paint(aoi, 1, 2), {palette: '000000', opacity:0.8}, 'aoi')
