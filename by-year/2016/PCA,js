// from https://groups.google.com/forum/#!searchin/google-earth-engine-developers/timeout/google-earth-engine-developers/xbPM9Zl7qOg/hTxy-7AjBwAJ
// PCA
/*
Select Landsat 5 and 8 TOA tiles for region of interest
Compute Simple Cloud Score on the tiles for the region
Select 'cloud free' days over region (using a custom threshold method)
Compute NDVI on cloud free TOA Landsat 5 and 8 stacks
Create one image with NDVI from Landsat 5 and 8 as individual bands
Run PCA on image (using the PCA code lifted from an EE example)
Export result of PCA as a single Task
*/

var cloudThreshold = 20;//Threshold [0-100] at which we declare a cell to contain cloud
var cloudPercentageMax = 0.6;//Threshold [0-100] at which we declare an image to be too cloudy

var landsat_tile_090079_center = ee.Geometry.Point([151.6718, -27.4693]);//Bremer
var landsat_tile_091081_center = ee.Geometry.Point([149.4305, -30.2923]);//Maules

var landsat5_tiles = ee.ImageCollection('LANDSAT/LT5_L1T_TOA');
var landsat5_tiles_090079 = landsat5_tiles.filterBounds(landsat_tile_090079_center);
var landsat5_tiles_091081 = landsat5_tiles.filterBounds(landsat_tile_091081_center);

//Ignore Landsat 8 dates from 01-11-2015 onward due to cloud score errors
var landsat8_tiles = ee.ImageCollection('LANDSAT/LC8_L1T_TOA');
var landsat8_tiles_090079 = landsat8_tiles.filterBounds(landsat_tile_090079_center).filterDate('2013-01-01', '2015-10-31');
var landsat8_tiles_091081 = landsat8_tiles.filterBounds(landsat_tile_091081_center).filterDate('2013-01-01', '2015-10-31');

var region_maules = ee.Feature(ee.FeatureCollection('ft:1iItKzdj0Se3Z5MwOPa8cbMEGH65INA0sAN2YwxLh').first());
var region_bremer = ee.Feature(ee.FeatureCollection('ft:1fTCnoxKh19zKZ8TOyeWbMlF5dbO24QgwEUNzGK15').first());

function computeCloudScore(ic, region) {
  return ic.map(function(i) {
    var csi = ee.Algorithms.Landsat.simpleCloudScore(i.clip(region)).select(['cloud']);
    return csi;
  });
}

//var bremer_ls5_cloudScore = computeCloudScore(landsat5_tiles_090079, region_bremer);
var maules_ls5_cloudScore = computeCloudScore(landsat5_tiles_091081, region_maules);

//var bremer_ls8_cloudScore = computeCloudScore(landsat8_tiles_090079, region_bremer);
var maules_ls8_cloudScore = computeCloudScore(landsat8_tiles_091081, region_maules);

function getCloudPercentage(ic, threshold) {
  var result = ic.map(function(i) {
     var threshold_image = ee.Image(i).expression('' + threshold);
     var c = ee.Number((i.gt(threshold_image)).clip(i.geometry()).reduceRegion(ee.Reducer.sum()).get('cloud'));
     return i.set('CLOUD_COUNT', c.double())
  });
  result = result.map(function(i) {
     var zero_image = ee.Image(i).expression('0.0');
     var t = ee.Number((i.gte(zero_image)).clip(i.geometry()).reduceRegion(ee.Reducer.sum()).get('cloud'));
     return i.set('CLOUD_TOTAL', t.double());
  });
  result = result.map(function(i) {
     var c = ee.Number(i.get('CLOUD_COUNT'));
     var t = ee.Number(i.get('CLOUD_TOTAL'));
     var r = c.divide(t).multiply(ee.Number(100));
     return i.set('CLOUD_PERCENTAGE', r.double());
  });
  return result;
}

function getTOAImagesFromCloudScoreImages(csIC, ct, cpm, toaIC, region) {
  var cloudPercentage = getCloudPercentage(csIC, ct);
  // Filter out datasets where the cloud band (as generated by the simple cloud score algorithm) is 'masked'
  var nonMasked = cloudPercentage.filterMetadata('CLOUD_TOTAL', 'greater_than', 0);
  var filtered = nonMasked.filterMetadata('CLOUD_PERCENTAGE', 'less_than', cpm);
  return filtered.map(function(i) {
     var sdate = ee.Date(ee.Image(i).get('system:time_start'));
     return ee.Image(toaIC.filterDate(sdate).first()).clip(region);
  });
}

function computeNDVI(ic_toa, band_nir, band_red, tag) {
   return ic_toa.map(function(i) {
     var b_nir = i.select(band_nir);
     var b_red = i.select(band_red);
     var bandName = ee.Date(i.get('system:time_start')).format('YYYYMMdd').cat(tag);
     return (b_nir.subtract(b_red)).divide((b_nir.add(b_red))).rename(bandName);
   });
}

function computeNDWI(ic_toa, band_nir, band_swir, tag) {
     return ic_toa.map(function(i) {
     var b_nir = i.select(band_nir);
     var b_swir = i.select(band_swir);
     var bandName = ee.Date(i.get('system:time_start')).format('YYYYMMdd').cat(tag);
     return (b_nir.subtract(b_swir)).divide((b_nir.add(b_swir))).rename(bandName);
   });
}

function appendBand(current, previous) {
  current = current.select(0);
  return ee.Algorithms.If(ee.Algorithms.IsEqual(previous,null), current, current.addBands(ee.Image(previous)));
}

// Bremer

//var bremer_toa_ls5 = getTOAImagesFromCloudScoreImages(bremer_ls5_cloudScore, cloudThreshold, cloudPercentageMax, landsat5_tiles_090079, region_bremer);
//var bremer_toa_ls8 = getTOAImagesFromCloudScoreImages(bremer_ls8_cloudScore, cloudThreshold, cloudPercentageMax, landsat8_tiles_090079, region_bremer);

// NDVI

//var bremer_ndvi_ls5 = computeNDVI(bremer_toa_ls5, 'B4', 'B3', 'LS5');
//var bremer_ndvi_ls5_single = bremer_ndvi_ls5.iterate(appendBand);

//var bremer_ndvi_ls8 = computeNDVI(bremer_toa_ls8, 'B5', 'B4', 'LS8');
//var bremer_ndvi_ls8_single = bremer_ndvi_ls8.iterate(appendBand);

// NDWI

//var bremer_ndwi_ls5 = computeNDWI(bremer_toa_ls5, 'B4', 'B5', 'LS5');
//var bremer_ndwi_ls5_single = bremer_ndwi_ls5.iterate(appendBand);

//var bremer_ndwi_ls8 = computeNDWI(bremer_toa_ls8, 'B5', 'B6', 'LS8');
//var bremer_ndwi_ls8_single = bremer_ndwi_ls8.iterate(appendBand);

// Maules

var maules_toa_ls5 = getTOAImagesFromCloudScoreImages(maules_ls5_cloudScore, cloudThreshold, cloudPercentageMax, landsat5_tiles_091081, region_maules);
var maules_toa_ls8 = getTOAImagesFromCloudScoreImages(maules_ls8_cloudScore, cloudThreshold, cloudPercentageMax, landsat8_tiles_091081, region_maules);

// NDVI

var maules_ndvi_ls5 = computeNDVI(maules_toa_ls5, 'B4', 'B3', 'LS5');
var maules_ndvi_ls5_single = maules_ndvi_ls5.iterate(appendBand);

var maules_ndvi_ls8 = computeNDVI(maules_toa_ls8, 'B5', 'B4', 'LS8');
var maules_ndvi_ls8_single = maules_ndvi_ls8.iterate(appendBand);

// NDWI

//var maules_ndwi_ls5 = computeNDWI(maules_toa_ls5, 'B4', 'B5', 'LS5');
//var maules_ndwi_ls5_single = maules_ndwi_ls5.iterate(appendBand);

//var maules_ndwi_ls8 = computeNDWI(maules_toa_ls8, 'B5', 'B6', 'LS8');
//var maules_ndwi_ls8_single = maules_ndwi_ls8.iterate(appendBand);

// Combine LS5 & LS8
//var bremer_ndvi = ee.Image(bremer_ndvi_ls5_single).addBands(bremer_ndvi_ls8_single).clip(region_bremer);
var maules_ndvi = ee.Image(maules_ndvi_ls5_single).addBands(maules_ndvi_ls8_single).clip(region_maules);

//var bremer_ndwi = ee.Image(bremer_ndwi_ls5_single).addBands(bremer_ndwi_ls8_single).clip(region_bremer);
//var maules_ndwi = ee.Image(maules_ndwi_ls5_single).addBands(maules_ndwi_ls8_single).clip(region_maules);

//print(bremer_ndvi_ls5_single);
//print(bremer_ndvi_ls8_single);
//print(maules_ndvi_ls5_single);
//print(maules_ndvi_ls8_single);

// Compute PCA

function PCA(image, region, scale) {
  // Get some information about the input to be used later.
  //var scale = image.projection().nominalScale();
  var bandNames = image.bandNames();
  
  // Mean center the data to enable a faster covariance reducer
  // and an SD stretch of the principal components.
  var meanDict = image.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: region,
      scale: scale,
      maxPixels: 1e10
  });
  var means = ee.Image.constant(meanDict.values(bandNames));
  var centered = image.subtract(means);

  // This helper function returns a list of new band names.
  var getNewBandNames = function(prefix) {
    var seq = ee.List.sequence(1, bandNames.length());
    return seq.map(function(b) {
      return ee.String(prefix).cat(ee.Number(b).int());
    });
  };
  
  // This function accepts mean centered imagery, a scale and
  // a region in which to perform the analysis.  It returns the
  // Principal Components (PC) in the region as a new image.
  var getPrincipalComponents = function(centered, scale, region) {
    
    // Collapse the bands of the image into a 1D array per pixel.
    var arrays = centered.toArray();
  
    // Compute the covariance of the bands within the region.
    var covar = arrays.reduceRegion({
      reducer: ee.Reducer.centeredCovariance(),
      geometry: region,
      scale: scale,
      maxPixels: 1e10
    });

    // Get the 'array' covariance result and cast to an array.
    // This represents the band-to-band covariance within the region.
    var covarArray = ee.Array(covar.get('array'));
    //print('covarArray')
    //print(covarArray)
    
    // Perform an eigen analysis and slice apart the values and vectors.
    var eigens = covarArray.eigen();
    //print('eigens')
    //print(eigens)
    
    // This is a P-length vector of Eigenvalues.
    var eigenValues = eigens.slice(1, 0, 1);
    //print('eigenValues')
    //print(eigenValues)
    
    // This is a PxP matrix with eigenvectors in rows.
    var eigenVectors = eigens.slice(1, 1);
    //print('eigenVectors')
    //print(eigenVectors)

    // Convert the array image to 2D arrays for matrix computations.
    var arrayImage = arrays.toArray(1);
    //print('arrayImage')
    //print(arrayImage)
    
    // Left multiply the image array by the matrix of eigenvectors.
    var principalComponents = ee.Image(eigenVectors).matrixMultiply(arrayImage);
    //print('principalComponents')
    //print(principalComponents)

    // Turn the square roots of the Eigenvalues into a P-band image.
    var sdImage = ee.Image(eigenValues.sqrt())
      .arrayProject([0]).arrayFlatten([getNewBandNames('sd')]);
    //print('sdImage')
    //print(sdImage) 
    
    // Turn the PCs into a P-band image, normalized by SD.
    var result = principalComponents
      // Throw out an an unneeded dimension, [[]] -> [].
      .arrayProject([0])
      // Make the one band array image a multi-band image, [] -> image.
      .arrayFlatten([getNewBandNames('pc')])
      // Normalize the PCs by their SDs.
      .divide(sdImage);
    //print('result')
    //print(result)
    
    return result;
  };
  
  // Get the PCs at the specified scale and in the specified region
  var pcImage = getPrincipalComponents(centered, scale, region);
  return pcImage;
}

var scale = 30;

//var bremer_ndvi_pca = PCA(bremer_ndvi.clip(region_bremer), region_bremer.geometry(), scale).clip(region_bremer);
var maules_ndvi_pca = PCA(maules_ndvi.clip(region_maules), region_maules.geometry(), scale).clip(region_maules);

function exportSingleImage(image, name, geo, scale) {
  var regionString = ee.Geometry(geo.getInfo()).toGeoJSONString();
  Export.image(image, name, { region: regionString, scale: scale });
}

//exportSingleImage(bremer_ndvi_pca, "pcaNDVIBremer", region_bremer.geometry(), scale);
exportSingleImage(maules_ndvi_pca, "pcaNDVIMaules", region_maules.geometry(), scale);