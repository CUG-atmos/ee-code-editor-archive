/***
 * Scatter plot
 */
function getScatterPlot(x, y) {
  var rows = ee.List(x).zip(ee.List(y)).map(function(pair) {
    pair = ee.List(pair)
    return {c: [{v: pair.get(0)}, {v: pair.get(1)}]}
  }).getInfo()

  var cols = [
      {id: 'x', label: 'x', type: 'number'},
      {id: 'y', label: 'y', type: 'number'}
  ];

  return ui.Chart({cols: cols, rows: rows}, 'ScatterChart')
}

/***
 * Repeat function call count times
 */
function repeat(f, count) {
 return Array.apply(null, Array(count)).map(function() {
      return f()
  });
}

/***
 * Pseudo-random normal distribution generator: 
 * 
 * https://en.wikipedia.org/wiki/Marsaglia_polar_method
 */
function nextGaussian() {
    var v1, v2, s;
    do {
        v1 = 2.0 * Math.random() - 1.0;
        v2 = 2.0 * Math.random() - 1.0;
        s = v1 * v1 + v2 * v2;
    } while (s >= 1.0 || s === 0);
 
    s = Math.sqrt((-2.0 * Math.log(s)) / s);
 
    return v1 * s;
}

/***
 * Generates 2D normal distribution
 */
function norm2d(count, meanX, meanY, sigmaX, sigmaY) {
  var x = repeat(nextGaussian, count).map(function(v) { return meanX + v * sigmaX})
  var y = repeat(nextGaussian, count).map(function(v) { return meanY + v * sigmaY})
  
  return {x: x, y: y}
}

var dist = norm2d(1000, 0, 0, 0.8, 0.3)

print(getScatterPlot(dist.x, dist.y).setOptions({
  hAxis: { viewWindow: {min:-2.5,max:2.5 }},
  vAxis: { viewWindow: {min:-2.5,max:2.5 }},
  pointSize: 1,
  width: 400, height: 400,
  dataOpacity: 0.4
}))