/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[25.019989013671875, 61.06742178713346],
          [25.038528442382812, 61.03917343689436],
          [25.24211883544922, 61.0604451248855],
          [25.212936401367188, 61.088840500894065],
          [25.0982666015625, 61.07888011104415],
          [25.020675659179688, 61.065096403784125]]]),
    paajarvi = /* color: #d63000 */ee.Geometry.Polygon(
        [[[25.04093171206432, 61.05114047296569],
          [25.044021616845157, 61.046487144884374],
          [25.04745484437933, 61.048481512000905],
          [25.059814463502335, 61.04898008417351],
          [25.062561045529606, 61.048315319533906],
          [25.068054209584375, 61.048315319533906],
          [25.07217408262545, 61.04698574842757],
          [25.074577341899385, 61.04781673690458],
          [25.077667246680107, 61.04798293198574],
          [25.07818223081017, 61.048730799067535],
          [25.080070505953927, 61.048647703596494],
          [25.08195878109791, 61.049644834871025],
          [25.087108622399114, 61.04972792772793],
          [25.08934022029632, 61.05039266274083],
          [25.091915140946867, 61.05072502501913],
          [25.097408305000954, 61.05074579754584],
          [25.098212962743105, 61.05099506924297],
          [25.0997042759152, 61.05107815612057],
          [25.101174135872384, 61.050839281591536],
          [25.102069988117364, 61.05060558868288],
          [25.102668117360736, 61.05066530686483],
          [25.102665434663095, 61.05091197726966],
          [25.10278345098311, 61.05076657297463],
          [25.103531784063307, 61.05062116616366],
          [25.1035197138317, 61.05088082191964],
          [25.10376513719484, 61.05103661533295],
          [25.10438204843024, 61.051057383812186],
          [25.10470926813423, 61.051472822087774],
          [25.105012357047826, 61.05156629557999],
          [25.105315449537102, 61.051846715956486],
          [25.105197439969515, 61.05226215521971],
          [25.10555148895446, 61.05231537977226],
          [25.10577142993327, 61.05240430616555],
          [25.10590554191333, 61.05261786080177],
          [25.105283269174834, 61.05278532955286],
          [25.105304723424865, 61.05295279763679],
          [25.105905540262256, 61.052820384011845],
          [25.106120119869956, 61.05302030684918],
          [25.106517079448622, 61.05329552421958],
          [25.10802985268515, 61.05350842227339],
          [25.10873795363159, 61.053555159410905],
          [25.10914564991083, 61.05366420625267],
          [25.110132704549528, 61.05361227564911],
          [25.11098028276274, 61.05358112257062],
          [25.11163474159639, 61.05361227956992],
          [25.112686167528636, 61.05363304628339],
          [25.113029484582512, 61.05372132134872],
          [25.113244057889005, 61.05389267806295],
          [25.113780497879134, 61.0542068291439],
          [25.113844873463677, 61.054354817328644],
          [25.114231119919054, 61.05438078005031],
          [25.11498789529628, 61.054258817383456],
          [25.115688142286672, 61.05388627845076],
          [25.115609106590227, 61.053689621737774],
          [25.11651712084017, 61.05365912826033],
          [25.116630046332148, 61.053547503897086],
          [25.116235886637696, 61.05328398270412],
          [25.11578129523923, 61.05318338885798],
          [25.115425248370457, 61.052800765688076],
          [25.11726421178855, 61.05157088135808],
          [25.118411338483384, 61.051614473063886],
          [25.118837596986623, 61.05203561223958],
          [25.11866304261298, 61.05210363184786],
          [25.118957667117456, 61.05219812788293],
          [25.119353814162196, 61.052169011586805],
          [25.12150951891863, 61.05290842731868],
          [25.123064415084627, 61.052775427808726],
          [25.123932662719767, 61.0528293578787],
          [25.124371739451703, 61.05257170245474],
          [25.12505013375528, 61.05240862489627],
          [25.12572852463404, 61.05241171515816],
          [25.12614941682432, 61.05233171473226],
          [25.12683192940699, 61.052032068261134],
          [25.12708528079247, 61.05182588750812],
          [25.127518495526942, 61.05173433214167],
          [25.12812134197611, 61.051730096285866],
          [25.128251107111964, 61.05199801023165],
          [25.128895349180425, 61.052287754056955],
          [25.129024612415492, 61.05243209604504],
          [25.129844094552368, 61.05238207633868],
          [25.13036317421222, 61.05234243761455],
          [25.131582967006352, 61.0524939980443],
          [25.13225723759365, 61.05223742719484],
          [25.134304783404218, 61.0521262432834],
          [25.1353099615244, 61.05193503041949],
          [25.136400948068513, 61.051453004402184],
          [25.13783184016006, 61.05153786515516],
          [25.139427046105766, 61.05114406380235],
          [25.140533945504103, 61.05105599781337],
          [25.141855409304753, 61.050822514543476],
          [25.142694071385904, 61.050770782678086],
          [25.143489811169957, 61.05055286562995],
          [25.14479613301455, 61.051719646167115],
          [25.146844093488426, 61.05196029005054],
          [25.14763205253894, 61.05188327171294],
          [25.148036762985384, 61.05200054927754],
          [25.148441478549557, 61.05228399899341],
          [25.14834865026603, 61.05266546273241],
          [25.147805205654322, 61.05304692508916],
          [25.147877029632014, 61.05333211447967],
          [25.147248182176668, 61.05373632461546],
          [25.14726306575767, 61.05404707197223],
          [25.147835852893195, 61.05424358296484],
          [25.148674795069383, 61.05428462059798],
          [25.149206397018133, 61.05418583478579],
          [25.14956633276529, 61.05394165548184],
          [25.15045785759105, 61.053827158756],
          [25.15058864941193, 61.053499508867695],
          [25.150481870112344, 61.05330335722313],
          [25.15016051660143, 61.053127976080006],
          [25.150525807474764, 61.05286951145405],
          [25.151019838780257, 61.05263181599203],
          [25.15209670488025, 61.05252692920664],
          [25.152709240741046, 61.052417618482785],
          [25.153150109174817, 61.05216290557254],
          [25.155920064525958, 61.05148728029146],
          [25.15776933428083, 61.052161240974286],
          [25.15752307658886, 61.052853043428385],
          [25.15710514933312, 61.052942479181475],
          [25.15669843707019, 61.053308292305545],
          [25.157043728040776, 61.053749130157435],
          [25.15808644533581, 61.05356163755127],
          [25.158914571775085, 61.05327028502042],
          [25.16010746653035, 61.05345664944012],
          [25.161165257792618, 61.0533992357993],
          [25.161665141652747, 61.05313410952682],
          [25.162924467887706, 61.052982049193595],
          [25.164140508023138, 61.05377483731266],
          [25.16389024690227, 61.05454509623259],
          [25.16466996691281, 61.05531535463451],
          [25.166486993496846, 61.0559835354626],
          [25.168082196850037, 61.056525307811306],
          [25.1688191515384, 61.057565517711446],
          [25.168864453451306, 61.05951183044234],
          [25.16785711684497, 61.0599865829679],
          [25.167536402362884, 61.0606274637207],
          [25.16730152215291, 61.061372178707344],
          [25.165349982508474, 61.06195076020551],
          [25.16539510328016, 61.06310792091619],
          [25.16823254821304, 61.06409340339877],
          [25.170080502051974, 61.064170860138056],
          [25.17210018260596, 61.065286474410165],
          [25.17257499418406, 61.06663044804889],
          [25.176483171184145, 61.06772526174461],
          [25.17472669243739, 61.06979581547458],
          [25.17726178983412, 61.07111900249052],
          [25.179928345040707, 61.071761692939646],
          [25.1836249142184, 61.071573953383584],
          [25.185001164438518, 61.07195749760933],
          [25.185175811938734, 61.07267317437399],
          [25.18998842162648, 61.07302502287391],
          [25.19248350841167, 61.072048170766955],
          [25.19412021501887, 61.07190162393629],
          [25.19575673495467, 61.07080008954859],
          [25.198291486644735, 61.07116270583038],
          [25.20221960929007, 61.07080422624122],
          [25.204526929112944, 61.06975303595569],
          [25.205165566762616, 61.069227422786035],
          [25.206147519391607, 61.06944917495374],
          [25.207116282401785, 61.06963526341575],
          [25.207741748747594, 61.07048566811971],
          [25.206049780614194, 61.07092088526466],
          [25.205044403235206, 61.07177127351597],
          [25.203205256838373, 61.07293230072265],
          [25.200593495384624, 61.073595085049696],
          [25.204029743947785, 61.07412378148044],
          [25.204633718135597, 61.075399695181055],
          [25.206871635949256, 61.07479643608971],
          [25.2074790739847, 61.07597817124146],
          [25.209327833237126, 61.077067176855635],
          [25.21059562522214, 61.07719656340455],
          [25.212860326955365, 61.07751030768966],
          [25.21605264962932, 61.077791698723274],
          [25.213923511891608, 61.07832215005851],
          [25.21131374377228, 61.078404734486504],
          [25.209733990318227, 61.07832123919649],
          [25.208085826510796, 61.078030421469336],
          [25.207810978948714, 61.077490540807645],
          [25.20571638001809, 61.077157930370184],
          [25.2031651106106, 61.07752621129909],
          [25.202158724221817, 61.07839258605358],
          [25.199435680596935, 61.07809666220395],
          [25.19671266646219, 61.078049738176965],
          [25.19487136134694, 61.078910624237324],
          [25.194746616535554, 61.07977150315853],
          [25.191476292068955, 61.079392536755634],
          [25.188549291420713, 61.079760629705106],
          [25.186042627540587, 61.07974964682597],
          [25.184995037218414, 61.07986312313206],
          [25.181887548326245, 61.07989355905536],
          [25.181212524070816, 61.07961584033995],
          [25.180022551609454, 61.07867399667275],
          [25.17729937062586, 61.078201542654845],
          [25.175286388510926, 61.07725660416805],
          [25.174217608350773, 61.077307876699834],
          [25.172977178212932, 61.07694403585688],
          [25.170239189984045, 61.077502966003784],
          [25.169385142809006, 61.07699366622294],
          [25.16801403242539, 61.076988064340014],
          [25.165268548434597, 61.07694372755541],
          [25.163037516363033, 61.07642338673699],
          [25.160892060718652, 61.07670284006958],
          [25.15780247463738, 61.07631807975423],
          [25.15550293653132, 61.075276845901],
          [25.153804291545157, 61.07531489259836],
          [25.150810364732365, 61.0750843947698],
          [25.147472995237194, 61.076514326402005],
          [25.145165399265807, 61.076906404805506],
          [25.1418277651253, 61.07729842434622],
          [25.1392717938445, 61.08048985855103],
          [25.136105281463983, 61.080591316154354],
          [25.132938632531022, 61.0818548545288],
          [25.130655055516627, 61.080795589799344],
          [25.128028242810842, 61.080732408142296],
          [25.127633130398635, 61.07942404985482],
          [25.12792466777512, 61.07811569154751],
          [25.12438837662262, 61.07865358947722],
          [25.123173824193373, 61.07735098761141],
          [25.12161598311195, 61.0778747922445],
          [25.120903712363997, 61.07526952942217],
          [25.116733020117067, 61.073545854912346],
          [25.11582383044697, 61.071925906142084],
          [25.11800450051919, 61.07130236110016],
          [25.118751464602383, 61.07007719416446],
          [25.11606525074785, 61.06968240877604],
          [25.118245857880083, 61.06706596335738],
          [25.115569123835257, 61.065320885004745],
          [25.114265952252595, 61.06274525328932],
          [25.108827898859886, 61.06315799022394],
          [25.1059372240544, 61.06286593287118],
          [25.104076598691222, 61.06207548203488],
          [25.10035528415449, 61.06273710766379],
          [25.098350568891874, 61.0622358410812],
          [25.09248625270277, 61.0639725712709],
          [25.088352317360773, 61.06425942081688],
          [25.085591737149457, 61.06338340678901],
          [25.083861352853773, 61.06275654055515],
          [25.083504317299003, 61.06163131277588],
          [25.082381713168047, 61.06048724179645],
          [25.08469228744127, 61.05901090918165],
          [25.08450690204654, 61.057553450797705],
          [25.082248284710545, 61.05887476803249],
          [25.079302886709343, 61.05919920218182],
          [25.076285179352567, 61.057783007173455],
          [25.075291395978184, 61.05707490340004],
          [25.075670922176187, 61.05586835605346],
          [25.072726018643152, 61.05519582701518],
          [25.07016745230294, 61.054751528996796],
          [25.06795235074196, 61.053310226096606],
          [25.06642406275421, 61.05336433655725],
          [25.064286639619695, 61.052477442445046],
          [25.05974609158534, 61.05208897719659],
          [25.050853745182508, 61.052362833553936],
          [25.047265923963778, 61.052582607757614]]]),
    s2 = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Authors: Filipe Lisboa (ULisboa) and Eduardo Maeda (Helsinki University)

// This code uses the Global Surface Water Data (by EU Commission)
// to detect the areas in which the lakes' water levels have remained 
// unchanged in the period 2000-2015 with respect 1984-1999. This creates 
// a buffer for which we are sound that the estimates do not include land 
// vegetation. 

var polygon =  /* color: #98ff00 */geometry
var collection = ee.ImageCollection('LANDSAT/LT5_SR')
 .filterBounds(polygon)
 .filterDate('2011-05-01', '2011-09-30'); // selection of dates for which ice and snow are less probable
var mosaic = collection.mosaic(); 

// Import the Global Surface Water Data to detect lake boundaries 
var waterSurface = ee.Image('JRC/GSW1_0/GlobalSurfaceWater');
var waterChange = waterSurface.select('transition');

Map.addLayer(waterChange);

 // Select Permanent Water Only:
var Permanent_Water = 1; // value 1 represents pixels of permenant water, no change
var waterMask = waterChange.eq(Permanent_Water) // Water mask boolean = 1 to detect whater bodies


var masked = mosaic.updateMask(waterMask);

Map.setCenter(25.145301818847656,61.05894992590861, 13);
Map.addLayer(waterChange, {min:0, max:4, palette:'green, blue, black, cyan, white'}, 'Fmask');

Map.addLayer(masked.select('B5'), {min:0, max:0.7, palette:'yellow, green'}, 'Masked NIR');

/*
var PIXEL_SCALE = 30; // Meters. Resolution of most Landsat 8 bands
var PIXEL_AREA = PIXEL_SCALE * PIXEL_SCALE;
var regionCoverHistogram = masked.reduceRegion(
  ee.Reducer.frequencyHistogram(), polygon, PIXEL_SCALE);
print('Fmask class pixel counts', regionCoverHistogram);
// The return value of .get() is untyped, 
// cast it with ee.Number and ee.Dictionary.
var waterPixelCount =
  ee.Dictionary(regionCoverHistogram.get('cfmask'))
    .get(waterMask.toString());
var waterArea = ee.Number(waterPixelCount).multiply(PIXEL_AREA);
print('Water Area (sq meters) in region', waterArea);
*/

// Raster to vector conversion:
// Define zones+ of permanent water:
var zones = waterMask;

// Convert the zones to vectors.
var vectors = zones.addBands(waterMask).reduceToVectors({
  geometry: geometry,
  crs: waterSurface.projection(),
  scale: 50,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'zone',
  reducer: ee.Reducer.mean()
});
print(vectors);
Map.addLayer(vectors);


Map.setOptions('SATELLITE')



// Compute water mask from S2 according to: http://www.mdpi.com/2072-4292/8/5/386
  
/***
 * Return the DN that maximizes interclass variance in B5 (in the region).
 */
var otsu = function(histogram) {
    histogram = ee.Dictionary(histogram);

    var counts = ee.Array(histogram.get('histogram'));
    var means = ee.Array(histogram.get('bucketMeans'));
    var size = means.length().get([0]);
    var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);
    var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);
    var mean = sum.divide(total);

    var indices = ee.List.sequence(1, size);

    // Compute between sum of squares, where each mean partitions the data.
    var bss = indices.map(function(i) {
        var aCounts = counts.slice(0, 0, i);
        var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);
        var aMeans = means.slice(0, 0, i);
        var aMean = aMeans.multiply(aCounts)
            .reduce(ee.Reducer.sum(), [0]).get([0])
            .divide(aCount);
        var bCount = total.subtract(aCount);
        var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
        return aCount.multiply(aMean.subtract(mean).pow(2)).add(
            bCount.multiply(bMean.subtract(mean).pow(2)));
    });

    // Return the mean value corresponding to the maximum BSS.
    return means.sort(bss).get([-1]);
};


/***
 * Compute a threshold using Otsu method (bimodal)
 */
function computeThresholdUsingOtsu(image, scale, bounds, cannyThreshold, cannySigma, minValue, debug) {
    // clip image edges
    var mask = image.mask().gt(0).focal_min(ee.Number(scale).multiply(3), 'circle', 'meters');

    // detect sharp changes
    var edge = ee.Algorithms.CannyEdgeDetector(image, cannyThreshold, cannySigma);
    edge = edge.multiply(mask);

    // buffer around NDWI edges
    var edgeBuffer = edge.focal_max(ee.Number(scale).multiply(1), 'square', 'meters');
    var imageEdge = image.mask(edgeBuffer);

    // compute threshold using Otsu thresholding
    var buckets = 100;
    var hist = ee.Dictionary(ee.Dictionary(imageEdge.reduceRegion(ee.Reducer.histogram(buckets), bounds, scale)).values().get(0));

    var threshold = ee.Algorithms.If(hist.contains('bucketMeans'), otsu(hist), 0.3);
    threshold = ee.Number(threshold)//.add(0.05)

    if(debug) {
        Map.addLayer(edge.mask(edge), {palette:['ff0000']}, 'edges', false);

        print('Threshold: ', threshold);

        print(ui.Chart.image.histogram(image, bounds, scale, buckets));
        print(ui.Chart.image.histogram(imageEdge, bounds, scale, buckets));
        Map.addLayer(mask.mask(mask), {palette:['000000']}, 'image mask', false);
    }

    return minValue !== 'undefined' ? threshold.max(minValue) : threshold;
}

function getEdge(mask) {
  return ee.Algorithms.CannyEdgeDetector(mask, 0.99,0)
}

var bounds = paajarvi

var debug = true
var scale = 30
var cannyThreshold = 0.9
var cannySigma = 0.5
var minValue = -0.1

print(th)
  
var bounds = paajarvi.buffer(200)  
  
var image = s2
  .filterBounds(bounds)
  .select(['B3', 'B8'])
  .map(function(i) { return i.resample('bicubic') })
  .reduce(ee.Reducer.percentile([15])).rename(['B3', 'B8'])
  .divide(10000)
  .clip(bounds)
  
var ndwi = image
  .normalizedDifference()
  

var th = computeThresholdUsingOtsu(ndwi, scale, bounds, cannyThreshold, cannySigma, minValue, debug)
  
var water = ndwi.gt(th)

// mixed pixels are understimated
water = water.focal_max(15, 'circle', 'meters')

var waterEdge = getEdge(water.mask(water))
  
Map.addLayer(image, {bands: ['B3','B8','B3'], min: 0.02, max: 0.25}, 'image')
Map.addLayer(water, {}, 'water', false)
Map.addLayer(waterEdge.mask(waterEdge), {palette:['ff0000']}, 'water (edge)')

var scale = 10

var vector = water.mask(water).reduceToVectors({geometry: bounds, scale: scale })
//var vector = vector.map(function(f) { return f.simplify(scale*3)})

Map.addLayer(vector, {}, 'water (vector)')
