var land = ee.Image("users/gena/land_polygons_image").mask();

/*** 
 * Convet image from degrees to radians
 */
function radians(img) { return img.toFloat().multiply(3.1415927).divide(180); }

/***
 * Computes hillshade
 */
exports.hillshade = function(az, ze, slope, aspect) {
  var azimuth = radians(ee.Image.constant(az));
  var zenith = radians(ee.Image.constant(ze));
  return azimuth.subtract(aspect).cos().multiply(slope.sin()).multiply(zenith.sin())
      .add(zenith.cos().multiply(slope.cos()));
}

/***
 * Styles RGB image using hillshading, mixes RGB and hillshade using HSV<->RGB transform
 */
function hillshadeRGB(image, elevation, weight, height_multiplier, azimuth, zenith, castShadows, proj) {
  weight = weight || 1.5
  height_multiplier = height_multiplier || 5
  azimuth = azimuth || 0
  zenith = zenith || 45

  var hsv = image.visualize().unitScale(0, 255).rgbToHsv();
 
  var z = elevation.multiply(ee.Image.constant(height_multiplier))

  var terrain = ee.Algorithms.Terrain(z)
  var slope = radians(terrain.select(['slope']));

  var aspect = radians(terrain.select(['aspect'])).resample('bicubic');
  var hs = exports.hillshade(azimuth, zenith, slope, aspect).resample('bicubic');

  if(castShadows) {
    var hysteresis = true
    var neighborhoodSize = 100

    var hillShadow = ee.Algorithms.HillShadow(z, azimuth, zenith, neighborhoodSize, hysteresis).float().not()
    
    // opening
    // hillShadow = hillShadow.multiply(hillShadow.focal_min(3).focal_max(6))    
  
    // cleaning
    hillShadow = hillShadow.focal_mode(3)
  
    // smoothing  
    hillShadow = hillShadow.convolve(ee.Kernel.gaussian(5, 3))
  
    // transparent
    hillShadow = hillShadow.multiply(0.4)
  
    hs = ee.ImageCollection.fromImages([
      hs.rename('shadow'), 
      hillShadow.mask(hillShadow).rename('shadow')
    ]).mosaic()
  }

  var intensity = hs.multiply(ee.Image.constant(weight)).multiply(hsv.select('value'));
  var huesat = hsv.select('hue', 'saturation');

  return ee.Image.cat(huesat, intensity).hsvToRgb();
}

function addDem(customImage, opt_name, opt_weight) {
  // var options = {region: catchments, layer: {visible: false, name: 'DEM'}}
  var options = {layer: {visible: false, name: 'DEM'}, 
      palette: ["d9d9d9","bdbdbd","969696","737373","525252","252525","000000"].reverse(),
  }
  
  if(opt_name) {
    options.layer.name = opt_name
  }

  var STYLE_DEM = '\
    <RasterSymbolizer>\
      <ColorMap  type="intervals" extended="false" >\
        <ColorMapEntry color="#cef2ff" quantity="-200" label="-200m"/>\
        <ColorMapEntry color="#9cd1a4" quantity="0" label="0m"/>\
        <ColorMapEntry color="#7fc089" quantity="50" label="50m" />\
        <ColorMapEntry color="#9cc78d" quantity="100" label="100m" />\
        <ColorMapEntry color="#b8cd95" quantity="250" label="250m" />\
        <ColorMapEntry color="#d0d8aa" quantity="500" label="500m" />\
        <ColorMapEntry color="#e1e5b4" quantity="750" label="750m" />\
        <ColorMapEntry color="#f1ecbf" quantity="1000" label="1000m" />\
        <ColorMapEntry color="#e2d7a2" quantity="1250" label="1250m" />\
        <ColorMapEntry color="#d1ba80" quantity="1500" label="1500m" />\
        <ColorMapEntry color="#d1ba80" quantity="10000" label="10000m" />\
      </ColorMap>\
    </RasterSymbolizer>';

    var dems = ee.ImageCollection.fromImages([
        ee.Image('JAXA/ALOS/AW3D30_V1_1').select('MED').resample('bicubic'),
        //ee.Image('USGS/SRTMGL1_003').float().resample('bicubic'),
        //ee.Image('USGS/NED').float().resample('bicubic'),
        //ee.Image('AHN/AHN2_05M_RUW').float().resample('bicubic'),
        //demAU
    ])
    
    dems = ee.ImageCollection(dems)
    
    var image = dems.map(function(i) {
      var rgb = i.sldStyle(STYLE_DEM);
      
      if(options && options.palette) {
        rgb = i.visualize({min: options.min, max: options.max, palette: options.palette})
      }
      
      if(customImage) {
        rgb = customImage
      }
    
      var azimuth = 315;
      var zenith = 20;
      var weight = 1.1;
      
      if(opt_weight) {
        weight = opt_weight
      }
      
      var heightMultiplier = 15;
      
      if(options.extrusion) {
        heightMultiplier = options.extrusion
      }
      var image = hillshadeRGB(rgb, i, weight, heightMultiplier, azimuth, zenith) 
      
      return image
    }).mosaic()

    // if(region) {
    //   image = image.clip(region)
    // }
    
    // if(mask) {
    //   image = image.updateMask(mask)
    // }
  
    var layer = getLayerOptions(options)  
    Map.addLayer(image.updateMask(land), {}, layer.name, layer.visible, layer.opacity)
}

function addCatchments(level, edgesOnly) {
  // Rasterized geometries on PFAF12 
  // Author: rutgerhofste@gmail.com
  var HydroBASINSimage = ee.Image("users/rutgerhofste/PCRGlobWB20V04/support/global_Standard_lev00_30sGDALv01");

  var catchments = HydroBASINSimage.divide(ee.Number(10).pow(ee.Number(12).subtract(level))).floor();
  catchments = catchments.unmask().focal_mode(625, 'circle', 'meters')
  
  var edges = ee.Algorithms.CannyEdgeDetector(catchments, 0.99, 0)//.focal_max(1).focal_mode(1)
  edges = edges.mask(edges)

  catchments = catchments.randomVisualizer().select([0, 1, 2])
  
  // var palette = ["a6cee3","1f78b4","b2df8a","33a02c","fb9a99","e31a1c","fdbf6f","ff7f00","cab2d6"]
  // catchments = catchments.mod(palette.length).visualize({min: 0, max: palette.length-1, palette: palette})

  if(edgesOnly) {
    Map.addLayer(edges.visualize({ palette: ['ffffff'], forceRgbOutput: true }), {}, 'catchments (edges, level ' + level + ')', false)
  } else {
    
    var name = 'catchments (level ' + level + ')'

    addDem(catchments.blend(edges.visualize({ palette: ['ffffff'], forceRgbOutput: true })), name + ' + DEM', 0.75)

    //Map.addLayer(catchments.blend(edges.visualize({ palette: ['ffffff'], forceRgbOutput: true })).updateMask(land), {}, name, false, 0.5)
  }
}

/***
 * Configures layer options
 */
function getLayerOptions(options) {
  var layer = {
    visible: true,
    opacity: 1.0,
    name: '<layer name>'
  }  
  
  if(options && typeof(options.layer) !== 'undefined') {
    layer.visible = typeof(options.layer.visible) !== 'undefined' ? options.layer.visible : layer.visible
    layer.opacity = typeof(options.layer.opacity) !== 'undefined' ? options.layer.opacity : layer.opacity
    layer.name = typeof(options.layer.name) !== 'undefined' ? options.layer.name : layer.name
  }
  
  return layer
}

/***
 * Add rivers (from users/gena/packages:hydro)
 */
function addRivers(options) {
  var rivers = ee.FeatureCollection('users/gena/HydroEngine/riv_15s_lev05')
      
  // if(options && options.maxFA) {
  //   rivers = rivers.filter(ee.Filter.gt('UP_CELLS', options.maxFA))
  // }

  // Map.addLayer(rivers.style({ width: 1, color: 'lightblue' }), {}, 'rivers')

  // return 
  
  if(options && options.catchments) {
    var ids = ee.List(options.catchments.aggregate_array('hybas_id'))

    rivers = rivers
      .filter(ee.Filter.inList('hybas_id', ids.map(function(id) { return ee.Number(id).format('%d') }))
    )
  }
  
  if(options && options.maxFA) {
    rivers = rivers.filter(ee.Filter.gt('UP_CELLS', options.maxFA))
  }

  rivers = rivers.map(function(f) { return f.set('UP_CELLS_LOG', ee.Number(f.get('UP_CELLS')).log10())})
  
  var riversImage = ee.Image().float();
  
  var scale = Map.getScale() * 8
  
  if(options && options.scale) {
    scale = options.scale
  }
  
  for(var th=1; th<8; th+=2) {
    var r = rivers.filter(ee.Filter.gt('UP_CELLS_LOG', th))
    riversImage = riversImage
      .blend(r.style({ color: '00334455', width: ee.Number(100).multiply(th).divide(scale).add(1), neighborhood: 2}))
      .blend(r.style({ color: '0099CC', width: ee.Number(100).multiply(th).divide(scale), neighborhood: 2}))
  }
  
  if(options && options.large) {
    // Natural Earth
    rivers = ee.FeatureCollection('ft:1yMXz_cItkAJFvmeXNcsuW2i7kK5i1iJ0QcYK3g')
    
    riversImage = rivers.style({ color: '0099CC', width: 1 })
  }
  
  if(options && options.region) {
    riversImage = riversImage.clip(options.region)
  }
  
  var layer = getLayerOptions(options)  
  
  var palette = ['ccffff']
  
  if(options && options.palette) {
    palette = options.palette
  }
  
    //riversImage = riversImage.visualize({palette:palette})
  
  var riversLayer = ui.Map.Layer(riversImage, {}, layer.name, layer.visible, layer.opacity)
  
  Map.layers().add(riversLayer)

  var minZoom = 0
  var maxZoom = 25

  if(options) {
    if(options.minZoom) {
      minZoom = options.minZoom
    }
    if(options.maxZoom) {
      maxZoom = options.maxZoom
    }
  }

  function upateVisibility(layer, zoom, minZoom, maxZoom) {
    if(!(options && options.autoToggle)) {
      return
    }

    if(zoom < minZoom || zoom > maxZoom) {
      if(layer.getShown()) {
        layer.setShown(false)
      }
    } else {
      if(!layer.getShown()) {
        layer.setShown(true)
      }
    }
  }

  Map.onChangeZoom(function(zoom) {
    upateVisibility(riversLayer, zoom, minZoom, maxZoom)
  })
  
  upateVisibility(riversLayer, Map.getZoom(), minZoom, maxZoom)

  return riversImage
}

 
/***
 * pad(0,3) --> '003'
 */
var pad = function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

/***
 * from https://snazzymaps.com
 */
var MAP_STYLES = {
  Dark: [
    {
        "featureType": "all",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "saturation": 36
            },
            {
                "color": "#000000"
            },
            {
                "lightness": 40
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "labels.text.stroke",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "color": "#000000"
            },
            {
                "lightness": 16
            }
        ]
    },
    {
        "featureType": "all",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 20
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 17
            },
            {
                "weight": 1.2
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "lightness": "32"
            }
        ]
    },
    {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "weight": "2.28"
            },
            {
                "saturation": "-33"
            },
            {
                "lightness": "24"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 20
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "lightness": "0"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "lightness": "69"
            }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 21
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "lightness": "63"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "color": "#2d2d2d"
            },
            {
                "lightness": 17
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 29
            },
            {
                "weight": 0.2
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 18
            }
        ]
    },
    {
        "featureType": "road.local",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 16
            }
        ]
    },
    {
        "featureType": "transit",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#000000"
            },
            {
                "lightness": 19
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [
            {
                "color": "#0f252e"
            },
            {
                "lightness": 17
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "lightness": "-100"
            },
            {
                "gamma": "0.00"
            }
        ]
    }
]
}


Map.setOptions('Dark', MAP_STYLES)
Map.style().set('cursor', 'crosshair')



// -----------------------------------------------------------

addDem()

addCatchments(3)
addCatchments(4)
addCatchments(5)
addCatchments(6)
addCatchments(7)
addCatchments(8)
addCatchments(9)

Map.addLayer(ee.Image(1), {palette: ['000000']}, 'black', false, 0.7)



addRivers({ minZoom: 8, maxZoom: 25, autoToggle: true, maxFA: 0, layer: { name: 'rivers', opacity: 0.5, visible: true } })

addRivers({ minZoom: 6, maxZoom: 25, autoToggle: true, maxFA: 20000, layer: { name: 'rivers (large)', opacity: 0.85, visible: false } })

var riversNE = ee.FeatureCollection('ft:1yMXz_cItkAJFvmeXNcsuW2i7kK5i1iJ0QcYK3g')
var layerNE = ui.Map.Layer(riversNE.style({color: 'cyan', width: 1}), {}, 'rivers (Natural Earth)', true, 0.85)
Map.layers().add(layerNE)

Map.onChangeZoom(function(zoom) {
  if(zoom == 5) {
    if(!layerNE.getShown()) {
      layerNE.setShown(true)
    }
  } else if(zoom == 6) {
    if(layerNE.getShown()) {
      layerNE.setShown(false)
    }
  }
})


var waterOccurrence = ee.Image("JRC/GSW1_0/GlobalSurfaceWater")
  .select('occurrence')
  .divide(100)
  .unmask(0)
  .resample('bicubic')

// PuBu[9]
var palette = ["fff7fb","ece7f2","d0d1e6","a6bddb","74a9cf","3690c0","0570b0","045a8d","023858"]

// var palette = ['ffffb2', 'fecc5c', 'fd8d3c', 'f03b20', 'bd0026'].reverse()

//waterOccurrence = waterOccurrence.focal_min(1)

var waterOccurrenceLayer = ui.Map.Layer(waterOccurrence.mask(waterOccurrence.multiply(2).multiply(land)), {min: 0, max: 1, palette: palette}, 'water occurrence', false, 0.9)
Map.layers().add(waterOccurrenceLayer)

var paletteHot = ["ffffcc","ffeda0","fed976","feb24c","fd8d3c","fc4e2a","e31a1c","bd0026","800026"].reverse().slice(1)
var waterOccurrenceLavaLayer = ui.Map.Layer(waterOccurrence.mask(waterOccurrence.multiply(2).multiply(land)), {min: 0, max: 1, palette: paletteHot}, 'water occurrence (lava)', false, 0.9)
Map.layers().add(waterOccurrenceLavaLayer)


Map.onChangeZoom(function(zoom) {
  if(zoom == 6) {
    if(!waterOccurrenceLayer.getShown()) {
      waterOccurrenceLayer.setShown(true)
    }
  } else if(zoom == 5) {
    if(waterOccurrenceLayer.getShown()) {
      waterOccurrenceLayer.setShown(false)
    }
  }
})

// waterbodies

var waterbodiesAll = ee.FeatureCollection("users/gena/HydroLAKES_polys_v10");
var imageAll = waterbodiesAll.style({ color: '#00FFFF', width: 1, fillColor: '#00FFFF55' })

var layerAll = ui.Map.Layer(imageAll, {}, 'waterbodies', false, 0.85)
Map.layers().add(layerAll)

var waterbodiesAllPoints = ee.FeatureCollection("users/gena/HydroLAKES_points_v10");
var imageAllPoints = ee.Image().paint(waterbodiesAllPoints, 1, 1).visualize({ palette: ['00ffff'] })

var layerAllPoints = ui.Map.Layer(imageAllPoints, {}, 'waterbodies (points)', true, 0.5)
Map.layers().add(layerAllPoints)

Map.onChangeZoom(function(zoom) {
  if(zoom > 5) {
    layerAll.setShown(true)
    layerAllPoints.setShown(false)
  } else {
    if(layerAll.getShown()) {
      layerAll.setShown(false)
      layerAllPoints.setShown(true)
    }
  }
})

var dams = ee.FeatureCollection('ft:1l7V5-gy93kQiWTw75yENYo-i6UeZiwTD-cKNHD1G')

var damsSmall = ee.Image().paint(dams, 1, 1).visualize({ palette: ['ff8000'] })
var damsLarge = ee.Image().paint(dams, 1, 2).visualize({ palette: ['ff8000'] })

var damsCurrent = damsSmall

var damsLayer = ui.Map.Layer(damsSmall, {}, 'dams', true)
Map.layers().add(damsLayer)

Map.onChangeZoom(function(zoom) {
  if(zoom > 7) {
    if(damsCurrent !== damsLarge) {
      damsCurrent = damsLarge
      damsLayer.setEeObject(damsLarge)
    }
  } else {
    if (damsCurrent !== damsSmall) {
      damsCurrent = damsSmall
      damsLayer.setEeObject(damsSmall)
    }
  }
})
Map.setCenter(0, 15, 3)

//Map.setOptions('SATELLITE')