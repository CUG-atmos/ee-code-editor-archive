/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2 = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var charting = require('users/gena/packages:charting')
var animation = require('users/gena/packages:animation')
var assets = require('users/gena/packages:assets')
var palettes = require('users/gena/packages:palettes') // check https://github.com/gee-community/ee-palettes

var start = ee.Date('2019-01-01')
var stop = ee.Date('2020-01-01')
var bounds = ee.Geometry(Map.getBounds(true))

var images = assets.getImages(bounds, {
  missions: [
    'S2', 
    'L8', 
    'L7'
  ],
  filter: ee.Filter.date(start, stop)
})

print(images.size())

images = assets.getMostlyCleanImages(images, bounds)

print(images.size())

images = images.sort('system:time_start')


plotTimes(images)

images = images.map(function(i) {
  return i.set({ label: i.date().format('YYYY-MM-dd').cat(' ').cat(i.get('MISSION')) })
})

print(images.first())

// animation.animate(images, {
//   vis: { bands: ['swir', 'nir', 'green'], min: 0.05, max: 0.5 },
//   label: 'label',
//   maxFrames: 20
// })

print(images.first())

var images_ndsi = images.map(function(i) {
  return i.normalizedDifference(['swir', 'green'])
    .copyProperties(i, ['label'])
})

print('NDSI image', images_ndsi.first())

animation.animate(images_ndsi, {
  vis: { min: -0.5, max: 0.5, palette: palettes.crameri.oslo[50] },
  label: 'label',
  maxFrames: 20
})




function plotTimes(images) {
  // plot times
  var rect = ee.Geometry.Rectangle({ coords: [[0, 0], [100, 4]], geodesic: false })
    
  // add rug plots
  var plot = new charting.Plot(rect.bounds(), { 
    area: { width: 1, color: '000000', fillColor: '00000011' }
  })
  
  plot.setMinMax(start.millis(), stop.millis(), 0, 1)
  
  var times = ee.List(images.filter(ee.Filter.eq('MISSION', 'S2')).aggregate_array('system:time_start'))
  plot.addRugSeries('all images', times, { width: 1, color: 'red' }, 1)  
  
  var times = ee.List(images.filter(ee.Filter.eq('MISSION', 'L8')).aggregate_array('system:time_start'))
  plot.addRugSeries('all images', times, { width: 1, color: 'blue' }, 1)  
  
  var times = ee.List(images.filter(ee.Filter.eq('MISSION', 'L7')).aggregate_array('system:time_start'))
  plot.addRugSeries('all images', times, { width: 1, color: 'green' }, 1)  
  
  print(plot.getThumbnail({ dimensions: '600x24'}))
}